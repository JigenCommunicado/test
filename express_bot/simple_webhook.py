#!/usr/bin/env python3
"""
Simple Express Bot Webhook Server
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç Express Messenger
"""

import asyncio
import json
import logging
from aiohttp import web, ClientSession
from aiohttp.web import Request, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleExpressBotWebhookServer:
    """–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ Express –±–æ—Ç–∞"""
    
    def __init__(self):
        self.logger = logger
        self.config = {
            "host": "0.0.0.0",
            "port": 5003
        }
        
    async def webhook_handler(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Express"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            data = await request.json()
            self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(data, ensure_ascii=False)}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
            event_type = data.get('type', 'unknown')
            user_id = data.get('user_id', 'unknown')
            
            if event_type == 'message':
                self.logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data.get('text', '')}")
            elif event_type == 'command':
                self.logger.info(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data.get('command', '')}")
            elif event_type == 'user_joined':
                self.logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è")
            elif event_type == 'user_left':
                self.logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∫–∏–Ω—É–ª")
            else:
                self.logger.info(f"üìã –°–æ–±—ã—Ç–∏–µ {event_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return web.json_response({
                "status": "ok",
                "message": "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "event_type": event_type,
                "user_id": user_id
            })
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return web.json_response({
                "status": "error",
                "message": str(e)
            }, status=500)
    
    async def health_check(self, request: Request) -> Response:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return web.json_response({
            "status": "ok",
            "service": "Express Bot Webhook Server",
            "version": "1.0.0"
        })
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        app = web.Application()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        app.router.add_post('/webhook', self.webhook_handler)
        app.router.add_get('/health', self.health_check)
        app.router.add_get('/', self.health_check)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, self.config['host'], self.config['port'])
        await site.start()
        
        self.logger.info(f"üöÄ Express Bot Webhook Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.config['host']}:{self.config['port']}")
        self.logger.info(f"üì° Webhook URL: http://{self.config['host']}:{self.config['port']}/webhook")
        self.logger.info(f"‚ù§Ô∏è Health check: http://{self.config['host']}:{self.config['port']}/health")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Future()  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
        except KeyboardInterrupt:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        finally:
            await runner.cleanup()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = SimpleExpressBotWebhookServer()
    await server.start_server()

if __name__ == '__main__':
    asyncio.run(main())

