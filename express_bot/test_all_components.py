#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Express Bot
"""

import asyncio
import aiohttp
import json
import time

async def test_all_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Express Bot...")
    
    base_url = "https://comparing-doom-solving-royalty.trycloudflare.com:5010"
    
    async with aiohttp.ClientSession() as session:
        # 1. Health Check
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Health Check...")
        try:
            async with session.get(f"{base_url}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Health Check OK: {data['status']}")
                    print(f"   Bot ID: {data['bot_id']}")
                    print(f"   Service: {data['service']}")
                else:
                    print(f"‚ùå Health Check Failed: {response.status}")
        except Exception as e:
            print(f"‚ùå Health Check Error: {e}")
        
        # 2. Manifest
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Manifest...")
        try:
            async with session.get(f"{base_url}/manifest") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Manifest OK: {data['name']} v{data['version']}")
                    print(f"   Commands: {len(data['commands'])}")
                else:
                    print(f"‚ùå Manifest Failed: {response.status}")
        except Exception as e:
            print(f"‚ùå Manifest Error: {e}")
        
        # 3. Admin Panel
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Admin Panel...")
        try:
            async with session.get(f"{base_url}/admin") as response:
                if response.status == 200:
                    print("‚úÖ Admin Panel –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    print(f"‚ùå Admin Panel Failed: {response.status}")
        except Exception as e:
            print(f"‚ùå Admin Panel Error: {e}")
        
        # 4. Webhook Test
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Webhook...")
        test_data = {
            "type": "message",
            "user_id": "test_user_123",
            "text": "/start"
        }
        
        try:
            async with session.post(f"{base_url}/webhook", json=test_data) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ Webhook OK: {result['status']}")
                else:
                    error_text = await response.text()
                    print(f"‚ùå Webhook Failed: {response.status} - {error_text}")
        except Exception as e:
            print(f"‚ùå Webhook Error: {e}")
        
        # 5. API Stats
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API Stats...")
        try:
            async with session.get(f"{base_url}/api/stats") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ API Stats OK: {data}")
                else:
                    print(f"‚ùå API Stats Failed: {response.status}")
        except Exception as e:
            print(f"‚ùå API Stats Error: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Express.ms")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ SmartApp")
    print("3. –£–∫–∞–∂–∏—Ç–µ webhook URL")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

if __name__ == "__main__":
    asyncio.run(test_all_components())


