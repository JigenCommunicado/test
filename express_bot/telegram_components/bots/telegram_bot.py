"""
Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Mini Apps) –∏ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
"""

import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict

import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class UserSession:
    """–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: str
    first_name: str
    last_name: str
    language_code: str
    state: str = "main_menu"
    application_data: Dict = None
    created_at: datetime = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.application_data is None:
            self.application_data = {}

class FlightBookingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self, token: str, api_base_url: str = "http://localhost:5002"):
        self.token = token
        self.api_base_url = api_base_url
        self.sessions: Dict[int, UserSession] = {}
        self.application = None
        
        # URL –¥–ª—è Mini App
        self.mini_app_url = "http://localhost:8080/mobile_booking_ui.html"
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.sessions[user.id] = UserSession(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
            language_code=user.language_code or "ru"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=self.mini_app_url)),
                InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")
            ],
            [
                InlineKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏", callback_data="periods"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ ‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ üìÖ –£–∑–Ω–∞—Ç—å –ø–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
‚Ä¢ üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /my_applications - –ú–æ–∏ –∑–∞—è–≤–∫–∏

**–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
1. –ù–∞–∂–º–∏—Ç–µ "‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

**–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**
‚Ä¢ üñ•Ô∏è –ü–ö –≤–µ—Ä—Å–∏—è: /pc_version
‚Ä¢ üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: /mobile_version
‚Ä¢ üéõÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: /admin (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base_url}/health") as response:
                    if response.status == 200:
                        data = await response.json()
                        status_text = f"""
üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ**

üìä **–°—Ç–∞—Ç—É—Å:**
‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {data.get('app_name', 'N/A')}
‚Ä¢ –í–µ—Ä—Å–∏—è: {data.get('version', 'N/A')}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('active_users', 'N/A')}
‚Ä¢ –í—Ä–µ–º—è: {data.get('timestamp', 'N/A')}

‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
"""
                    else:
                        status_text = "üî¥ **–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        except Exception as e:
            status_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**\n\n`{str(e)}`"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            status_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def pc_version_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /pc_version"""
        pc_text = """
üñ•Ô∏è **–ü–ö –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã**

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:

üîó **–°—Å—ã–ª–∫–∏:**
‚Ä¢ [–ì–ª–∞–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è](http://localhost:8080/index.html)
‚Ä¢ [–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏](http://localhost:8080/flight_booking_ui.html)
‚Ä¢ [–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å](http://localhost:8080/admin_panel.html)

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            pc_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    
    async def mobile_version_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /mobile_version"""
        keyboard = [
            [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é", web_app=WebAppInfo(url=self.mini_app_url))],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        mobile_text = """
üì± **–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è**

–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:
"""
        
        await update.message.reply_text(
            mobile_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admin"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_text = """
üéõÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã:

üîó **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:** [–û—Ç–∫—Ä—ã—Ç—å](http://localhost:8080/admin_panel.html)

**–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            admin_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        if callback_data == "main_menu":
            await self.show_main_menu(query)
        elif callback_data == "my_applications":
            await self.show_my_applications(query)
        elif callback_data == "periods":
            await self.show_periods(query)
        elif callback_data == "help":
            await self.show_help(query)
        elif callback_data == "statistics":
            await self.show_statistics(query)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=self.mini_app_url)),
                InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")
            ],
            [
                InlineKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏", callback_data="periods"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """
üéØ **–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_my_applications(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base_url}/api/statistics") as response:
                    if response.status == 200:
                        data = await response.json()
                        text = f"""
üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ:**
"""
                        if 'statistics' in data:
                            for oke, count in data['statistics'].items():
                                text += f"‚Ä¢ {oke}: {count} –∑–∞—è–≤–æ–∫\n"
                        else:
                            text += "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                    else:
                        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–∞—Ö"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_periods(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base_url}/api/application-periods") as response:
                    if response.status == 200:
                        data = await response.json()
                        text = "üìÖ **–ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫**\n\n"
                        
                        if data.get('periods'):
                            for period in data['periods']:
                                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if period.get('is_active') else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                                text += f"**{period.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                                text += f"üìÖ {period.get('start_date')} - {period.get('end_date')}\n"
                                text += f"{status}\n\n"
                        else:
                            text += "–ü–µ—Ä–∏–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                    else:
                        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–∏–æ–¥–∞—Ö"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞**

**–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
1. –ù–∞–∂–º–∏—Ç–µ "‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /pc_version - –ü–ö –≤–µ—Ä—Å–∏—è
‚Ä¢ /mobile_version - –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
‚Ä¢ /admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_statistics(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base_url}/api/statistics") as response:
                    if response.status == 200:
                        data = await response.json()
                        text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
                        
                        if 'statistics' in data:
                            total = sum(data['statistics'].values())
                            text += f"üìà **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:** {total}\n\n"
                            text += "**–ü–æ –û–ö–≠:**\n"
                            for oke, count in data['statistics'].items():
                                percentage = (count / total * 100) if total > 0 else 0
                                text += f"‚Ä¢ {oke}: {count} ({percentage:.1f}%)\n"
                        else:
                            text += "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                    else:
                        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("pc_version", self.pc_version_command))
        self.application.add_handler(CommandHandler("mobile_version", self.mobile_version_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await self.application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export TELEGRAM_BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = FlightBookingBot(token)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop
        try:
            loop = asyncio.get_running_loop()
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π loop, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            asyncio.create_task(bot.run())
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
