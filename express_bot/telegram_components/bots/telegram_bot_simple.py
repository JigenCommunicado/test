"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
–ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ async –ø—Ä–æ–±–ª–µ–º
"""

import os
import json
import logging
import time
import requests
from datetime import datetime
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FlightBookingBotSimple:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
    
    def __init__(self, token: str, api_base_url: str = "http://localhost:5002"):
        self.token = token
        self.api_base_url = api_base_url
        self.user_sessions = {}
        
        # URL –¥–ª—è Mini App
        self.mini_app_url = "http://localhost:8080/telegram_mini_app.html"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        keyboard = [
            [
                InlineKeyboardButton("‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=self.mini_app_url)),
                InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")
            ],
            [
                InlineKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏", callback_data="periods"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üöÄ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
‚Ä¢ ‚úàÔ∏è –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫
‚Ä¢ üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–∞—Ö –ø–æ–¥–∞—á–∏
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

**–ù–∞–∂–º–∏—Ç–µ "‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã**
"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/links` - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

**–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
1. –ù–∞–∂–º–∏—Ç–µ "‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Mini App:**
‚Ä¢ üì± –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
‚Ä¢ üé® –¢–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ Telegram
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
‚Ä¢ üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        try:
            response = requests.get(f"{self.api_base_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                status_text = f"""
üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ**

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {data.get('app_name', 'N/A')}
‚Ä¢ –í–µ—Ä—Å–∏—è: {data.get('version', 'N/A')}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('active_users', 'N/A')}
‚Ä¢ –í—Ä–µ–º—è: {data.get('timestamp', 'N/A')[:19]}

‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
üîó API: {self.api_base_url}
üì± Mini App: {self.mini_app_url}
"""
            else:
                status_text = "üî¥ **–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            status_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**\n\n–î–µ—Ç–∞–ª–∏: `{str(e)}`"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            status_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def links_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /links"""
        links_text = """
üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏**

**–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:**
‚Ä¢ [–ì–ª–∞–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è](http://localhost:8080/index.html)
‚Ä¢ [–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –ü–ö](http://localhost:8080/flight_booking_ui.html)
‚Ä¢ [–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è](http://localhost:8080/mobile_booking_ui.html)
‚Ä¢ [–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å](http://localhost:8080/admin_panel.html)

**API Endpoints:**
‚Ä¢ [Health Check](http://localhost:5002/health)
‚Ä¢ [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞](http://localhost:5002/api/statistics)

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
"""
        
        keyboard = [
            [InlineKeyboardButton("üì± Mini App", web_app=WebAppInfo(url=self.mini_app_url))],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            links_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await self.show_main_menu(query)
        elif query.data == "my_applications":
            await self.show_my_applications(query)
        elif query.data == "periods":
            await self.show_periods(query)
        elif query.data == "help":
            await self.show_help(query)
        elif query.data == "statistics":
            await self.show_statistics(query)
    
    async def show_main_menu(self, query):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=self.mini_app_url)),
                InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")
            ],
            [
                InlineKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏", callback_data="periods"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ **–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_my_applications(self, query):
        """–ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.get(f"{self.api_base_url}/api/statistics", timeout=5)
            if response.status_code == 200:
                data = response.json()
                text = "üìã **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫**\n\n"
                
                if 'statistics' in data:
                    total = sum(data['statistics'].values())
                    text += f"üìà **–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:** {total}\n\n**–ü–æ –û–ö–≠:**\n"
                    for oke, count in data['statistics'].items():
                        text += f"‚Ä¢ {oke}: {count}\n"
                else:
                    text += "–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_periods(self, query):
        """–ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            response = requests.get(f"{self.api_base_url}/api/application-periods", timeout=5)
            if response.status_code == 200:
                data = response.json()
                text = "üìÖ **–ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫**\n\n"
                
                if data.get('periods'):
                    for period in data['periods']:
                        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if period.get('is_active') else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                        text += f"**{period.get('name', '–ü–µ—Ä–∏–æ–¥')}**\n"
                        text += f"{period.get('start_date')} - {period.get('end_date')}\n"
                        text += f"{status}\n\n"
                else:
                    text += "–ü–µ—Ä–∏–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–∏–æ–¥–∞—Ö"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_help(self, query):
        """–°–ø—Ä–∞–≤–∫–∞"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/links` - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

**Mini App:**
–ù–∞–∂–º–∏—Ç–µ "‚úàÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ—à–∞–≥–æ–≤–æ–π —Ñ–æ—Ä–º–æ–π.

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_statistics(self, query):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            response = requests.get(f"{self.api_base_url}/api/statistics", timeout=5)
            if response.status_code == 200:
                data = response.json()
                text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
                
                if 'statistics' in data:
                    total = sum(data['statistics'].values())
                    text += f"üìà **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:** {total}\n\n"
                    
                    if total > 0:
                        text += "**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –û–ö–≠:**\n"
                        for oke, count in sorted(data['statistics'].items(), key=lambda x: x[1], reverse=True):
                            percentage = (count / total * 100)
                            bar = "‚ñà" * int(percentage / 10) + "‚ñë" * (10 - int(percentage / 10))
                            text += f"{oke}: {count} ({percentage:.1f}%)\n`{bar}`\n"
                else:
                    text += "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("links", self.links_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logger.info(f"üì± Mini App URL: {self.mini_app_url}")
        logger.info(f"üîó API URL: {self.api_base_url}")
        
        try:
            self.application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export TELEGRAM_BOT_TOKEN='—Ç–æ–∫–µ–Ω'")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    try:
        response = requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=10)
        if response.status_code != 200:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        bot_info = response.json()['result']
        print(f"‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: @{bot_info['username']} ({bot_info['first_name']})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = FlightBookingBotSimple(token)
    
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
