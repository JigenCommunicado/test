"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –±–µ–∑ Mini App
–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""

import os
import json
import logging
import requests
from datetime import datetime
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FlightBookingBotTest:
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self, token: str, api_base_url: str = "http://localhost:5002"):
        self.token = token
        self.api_base_url = api_base_url
        self.user_sessions = {}
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        keyboard = [
            [
                InlineKeyboardButton("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            ],
            [
                InlineKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥—ã", callback_data="periods"),
                InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data="links")
            ],
            [
                InlineKeyboardButton("üöÄ Mini App", web_app=WebAppInfo(url="https://bp-primary-aluminum-start.trycloudflare.com/telegram_mini_app_adaptive.html")),
                InlineKeyboardButton("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéØ **Express SmartApp - –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

ü§ñ **–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–∞—Ö –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
‚Ä¢ üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

**–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é:**
‚Ä¢ üñ•Ô∏è –ü–ö: http://localhost:8080/flight_booking_ui.html
‚Ä¢ üì± –ú–æ–±–∏–ª—å–Ω–∞—è: http://localhost:8080/mobile_booking_ui.html

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ `/status` - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ `/stats` - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/links` - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

**–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:**
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ –û–ö–≠
‚Ä¢ **–ü–µ—Ä–∏–æ–¥—ã** - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
‚Ä¢ **–°—Ç–∞—Ç—É—Å** - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API –∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ **–°—Å—ã–ª–∫–∏** - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏:**
‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
‚ùå Mini App —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è —Ä–∞–±–æ—Ç—ã
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API —Ä–∞–±–æ—Ç–∞–µ—Ç

**–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –≤ —Ä–∞–∑–¥–µ–ª–µ "üîó –°—Å—ã–ª–∫–∏"
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        await self.show_status_inline(update, is_command=True)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        await self.show_statistics_inline(update, is_command=True)
    
    async def links_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /links"""
        await self.show_links_inline(update, is_command=True)
    
    async def show_status_inline(self, update_or_query, is_command=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = requests.get(f"{self.api_base_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                status_text = f"""
üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!**

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {data.get('app_name', 'N/A')}
‚Ä¢ –í–µ—Ä—Å–∏—è: {data.get('version', 'N/A')}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('active_users', 'N/A')}
‚Ä¢ –í—Ä–µ–º—è: {data.get('timestamp', 'N/A')[:19]}

üîó **–°–µ—Ä–≤–∏—Å—ã:**
‚úÖ Flask API (–ø–æ—Ä—Ç 5002)
‚úÖ Static Server (–ø–æ—Ä—Ç 8080)
‚úÖ Telegram Bot

**Endpoints:**
‚Ä¢ Health: {self.api_base_url}/health
‚Ä¢ Statistics: {self.api_base_url}/api/statistics
‚Ä¢ Web UI: http://localhost:8080/
"""
            else:
                status_text = "üî¥ **–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\nAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç."
        except Exception as e:
            status_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API**\n\n`{str(e)}`\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5002"
        
        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")]]
        if not is_command:
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_command:
            await update_or_query.message.reply_text(
                status_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update_or_query.edit_message_text(
                status_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def show_statistics_inline(self, update_or_query, is_command=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            response = requests.get(f"{self.api_base_url}/api/statistics", timeout=5)
            if response.status_code == 200:
                data = response.json()
                text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
                
                if 'statistics' in data and data['statistics']:
                    stats = data['statistics']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ API –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º
                    total = stats.get('total_applications', 0)
                    if total == 0 and 'by_oke' in stats:
                        total = sum(stats['by_oke'].values())
                    
                    text += f"üìà **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:** {total}\n"
                    if 'total_files' in stats:
                        text += f"üìÇ **–§–∞–π–ª–æ–≤ Excel:** {stats['total_files']}\n"
                    text += "\n"
                    
                    if total > 0 and 'by_oke' in stats and stats['by_oke']:
                        text += "**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –û–ö–≠:**\n"
                        for oke, count in sorted(stats['by_oke'].items(), key=lambda x: x[1], reverse=True):
                            percentage = (count / total * 100)
                            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                            bar_length = int(percentage / 10)
                            bar = "‚ñà" * bar_length + "‚ñë" * (10 - bar_length)
                            text += f"`{bar}` {oke}: {count} ({percentage:.1f}%)\n"
                    else:
                        text += "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç"
                else:
                    text += "üìù **–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç**\n\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\nAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        except Exception as e:
            text = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n`{str(e)}`"
        
        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="statistics")]]
        if not is_command:
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_command:
            await update_or_query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update_or_query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def show_links_inline(self, update_or_query, is_command=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏"""
        links_text = """
üîó **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ**

**üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã:**
‚Ä¢ üè† –ì–ª–∞–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è: `localhost:8080/index.html`
‚Ä¢ ‚úàÔ∏è –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ (–ü–ö): `localhost:8080/flight_booking_ui.html`
‚Ä¢ üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: `localhost:8080/mobile_booking_ui.html`
‚Ä¢ üéõÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: `localhost:8080/admin_panel.html`

**üîß API Endpoints:**
‚Ä¢ üíö Health Check: `localhost:5002/health`
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: `localhost:5002/api/statistics`
‚Ä¢ üìÖ –ü–µ—Ä–∏–æ–¥—ã: `localhost:5002/api/application-periods`

**üì± –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö:**
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (PWA)

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** 
‚Ä¢ –°—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
‚Ä¢ –î–ª—è Mini App –≤ Telegram –Ω—É–∂–µ–Ω HTTPS
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
"""
        
        keyboard = []
        if not is_command:
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        if is_command:
            await update_or_query.message.reply_text(
                links_text,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
        else:
            await update_or_query.edit_message_text(
                links_text,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await self.show_main_menu(query)
        elif query.data == "info":
            await self.show_info(query)
        elif query.data == "statistics":
            await self.show_statistics_inline(query)
        elif query.data == "periods":
            await self.show_periods(query)
        elif query.data == "links":
            await self.show_links_inline(query)
        elif query.data == "status":
            await self.show_status_inline(query)
    
    async def show_main_menu(self, query):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            ],
            [
                InlineKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥—ã", callback_data="periods"),
                InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data="links")
            ],
            [
                InlineKeyboardButton("üöÄ Mini App", web_app=WebAppInfo(url="https://bp-primary-aluminum-start.trycloudflare.com/telegram_mini_app_adaptive.html")),
                InlineKeyboardButton("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ **Express SmartApp - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_info(self, query):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        info_text = """
üìã **–û —Å–∏—Å—Ç–µ–º–µ Express SmartApp**

üéØ **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:**
–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã

‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**
‚Ä¢ **Backend:** Flask API (Python)
‚Ä¢ **Frontend:** HTML/CSS/JavaScript
‚Ä¢ **Data:** Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚Ä¢ **Bot:** Python Telegram Bot
‚Ä¢ **Servers:** HTTP Static + Flask API

üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:**
‚Ä¢ Flask API —Å–µ—Ä–≤–µ—Ä: –ø–æ—Ä—Ç 5002
‚Ä¢ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä: –ø–æ—Ä—Ç 8080
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Excel —Ñ–∞–π–ª—ã
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

üì± **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:**
‚Ä¢ –ü–ö –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è
‚Ä¢ Telegram –±–æ—Ç (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
‚Ä¢ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

üöÄ **–°—Ç–∞—Ç—É—Å:** –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞
"""
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            info_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_periods(self, query):
        """–ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            response = requests.get(f"{self.api_base_url}/api/public/application-periods", timeout=5)
            if response.status_code == 200:
                data = response.json()
                text = "üìÖ **–ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫**\n\n"
                
                if data.get('periods'):
                    for i, period in enumerate(data['periods'], 1):
                        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if period.get('is_active') else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                        text += f"**{i}. {period.get('name', '–ü–µ—Ä–∏–æ–¥ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                        text += f"üìÖ {period.get('start_date', 'N/A')} - {period.get('end_date', 'N/A')}\n"
                        text += f"üìä {status}\n"
                        if period.get('description'):
                            text += f"üìù {period['description']}\n"
                        text += "\n"
                else:
                    text += "üìù **–ü–µ—Ä–∏–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã**\n\n"
                    text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫."
            elif response.status_code == 401:
                text = "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                text += "–î–∞–Ω–Ω—ã–π endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                text += "–ü–µ—Ä–∏–æ–¥—ã –∑–∞—è–≤–æ–∫ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑:\n"
                text += "‚Ä¢ [–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å](http://localhost:8080/admin_panel.html)\n"
                text += "‚Ä¢ [–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞–º–∏](http://localhost:8080/application_periods.html)\n\n"
                text += "**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:**\n"
                text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–µ—Ä–∏–æ–¥–æ–≤."
            else:
                text = f"‚ùå **–û—à–∏–±–∫–∞ API: {response.status_code}**\n\n"
                text += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                text += "‚Ä¢ [–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å](http://localhost:8080/admin_panel.html)\n"
                text += "‚Ä¢ [–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞–º–∏](http://localhost:8080/application_periods.html)"
        except Exception as e:
            text = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**\n\n`{str(e)}`\n\n"
            text += "**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**\n"
            text += "‚Ä¢ [–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å](http://localhost:8080/admin_panel.html)\n"
            text += "‚Ä¢ [–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞–º–∏](http://localhost:8080/application_periods.html)"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="periods")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        help_text = """
üëã **–ü—Ä–∏–≤–µ—Ç!** 

–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã Express SmartApp.

ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/links` - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

**–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —Å—Å—ã–ª–∫–µ /links**
"""
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
        try:
            import json
            data = json.loads(update.effective_message.web_app_data.data)
            user = update.effective_user
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App –æ—Ç {user.first_name}: {data}")
            
            if data.get('action') == 'submit_application':
                app_data = data.get('data', {})
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Flask API
                try:
                    response = requests.post(
                        f"{self.api_base_url}/api/application",
                        json=app_data,
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        if result.get('success'):
                            await update.effective_message.reply_text(
                                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
                                f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
                                f"‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {app_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                f"‚Ä¢ –û–ö–≠: {app_data.get('oke', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                f"‚Ä¢ –î–∞—Ç–∞: {app_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                f"‚Ä¢ –§–ò–û: {app_data.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {app_data.get('direction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                                f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                            )
                        else:
                            await update.effective_message.reply_text(
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                            )
                    else:
                        await update.effective_message.reply_text(
                            f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ (–∫–æ–¥: {response.status_code})"
                        )
                        
                except requests.RequestException as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Web App: {e}")
                    await update.effective_message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
            else:
                await update.effective_message.reply_text("üì± –î–∞–Ω–Ω—ã–µ –æ—Ç Web App –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Web App: {e}")
            await update.effective_message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App."
            )

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("links", self.links_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.web_app_data))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logger.info(f"üîó API URL: {self.api_base_url}")
        logger.info("üì± Mini App –æ—Ç–∫–ª—é—á–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç HTTPS)")
        
        try:
            self.application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("export TELEGRAM_BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    try:
        response = requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=10)
        if response.status_code != 200:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        bot_info = response.json()['result']
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info['username']} ({bot_info['first_name']})")
        print("üîó –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = FlightBookingBotTest(token)
    
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
