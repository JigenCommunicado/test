#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π SmartApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
import json
import logging
from datetime import datetime
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from excel_integration import ExcelIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∏—Ç—å CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
excel_integration = ExcelIntegration(data_dir="data")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
user_data = {}

class UserData:
    def __init__(self):
        self.location = None
        self.oke = None
        self.selected_date = None
        self.position = None
        self.fio = None
        self.tab_num = None
        self.direction = None
        self.flight_wishes = None

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = UserData()
    return user_data[user_id]

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SmartApp"""
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–¢–µ—Å—Ç–æ–≤—ã–π SmartApp - Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #333; text-align: center; margin-bottom: 30px; }
            .test-section { margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 8px; }
            .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; }
            .btn-primary { background: #007bff; color: white; }
            .btn-success { background: #28a745; color: white; }
            .btn-info { background: #17a2b8; color: white; }
            .result { margin-top: 15px; padding: 10px; border-radius: 5px; }
            .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
            .info { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
            pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üß™ –¢–µ—Å—Ç–æ–≤—ã–π SmartApp - Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</h1>
            
            <div class="test-section">
                <h3>üìä –¢–µ—Å—Ç Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h3>
                <button class="btn btn-primary" onclick="testExcelIntegration()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é</button>
                <button class="btn btn-info" onclick="getStatistics()">–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
                <div id="excel-result"></div>
            </div>

            <div class="test-section">
                <h3>üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É</h3>
                <button class="btn btn-success" onclick="createTestApplication()">–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É</button>
                <div id="application-result"></div>
            </div>

            <div class="test-section">
                <h3>üîß API —Ç–µ—Å—Ç—ã</h3>
                <button class="btn btn-primary" onclick="testAPI()">–¢–µ—Å—Ç –≤—Å–µ—Ö API</button>
                <div id="api-result"></div>
            </div>
        </div>

        <script>
            function showResult(elementId, message, type = 'info') {
                const element = document.getElementById(elementId);
                element.innerHTML = `<div class="result ${type}">${message}</div>`;
            }

            async function testExcelIntegration() {
                try {
                    const response = await fetch('/api/statistics');
                    const data = await response.json();
                    
                    if (response.ok) {
                        showResult('excel-result', `‚úÖ Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!<br><pre>${JSON.stringify(data, null, 2)}</pre>`, 'success');
                    } else {
                        showResult('excel-result', `‚ùå –û—à–∏–±–∫–∞: ${data.error}`, 'error');
                    }
                } catch (error) {
                    showResult('excel-result', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
                }
            }

            async function getStatistics() {
                try {
                    const response = await fetch('/api/statistics');
                    const data = await response.json();
                    
                    if (response.ok) {
                        const stats = data.statistics;
                        let statsText = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\\n';
                        for (const [oke, count] of Object.entries(stats)) {
                            statsText += `${oke}: ${count} –∑–∞—è–≤–æ–∫\\n`;
                        }
                        showResult('excel-result', `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:<br><pre>${statsText}</pre>`, 'info');
                    } else {
                        showResult('excel-result', `‚ùå –û—à–∏–±–∫–∞: ${data.error}`, 'error');
                    }
                } catch (error) {
                    showResult('excel-result', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
                }
            }

            async function createTestApplication() {
                const userId = 'test_' + Date.now();
                
                try {
                    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
                    const steps = [
                        { endpoint: '/api/start', data: { user_id: userId } },
                        { endpoint: '/api/select-location', data: { user_id: userId, location: '–ú–°–ö' } },
                        { endpoint: '/api/select-oke', data: { user_id: userId, oke: '–û–ö–≠ 1' } },
                        { endpoint: '/api/select-date', data: { user_id: userId, date: '20.09.2024' } },
                        { endpoint: '/api/select-position', data: { user_id: userId, position: '–ë–ü' } },
                        { endpoint: '/api/input-fio', data: { user_id: userId, fio: '–¢–µ—Å—Ç –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á', tab_num: '123456' } },
                        { endpoint: '/api/select-direction', data: { user_id: userId, direction: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' } },
                        { endpoint: '/api/input-wishes', data: { user_id: userId, wishes: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞' } }
                    ];

                    let result = '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏:\\n';
                    
                    for (let i = 0; i < steps.length; i++) {
                        const step = steps[i];
                        const response = await fetch(step.endpoint, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(step.data)
                        });
                        
                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(`–®–∞–≥ ${i + 1}: ${errorData.error}`);
                        }
                        
                        result += `‚úÖ –®–∞–≥ ${i + 1}: ${step.endpoint}\\n`;
                    }

                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞—è–≤–∫—É
                    const response = await fetch('/api/confirm', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ user_id: userId })
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${errorData.error}`);
                    }
                    
                    result += '‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Excel!';
                    showResult('application-result', `<pre>${result}</pre>`, 'success');
                    
                } catch (error) {
                    showResult('application-result', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
                }
            }

            async function testAPI() {
                const endpoints = [
                    { name: 'Health', url: '/api/health', method: 'GET' },
                    { name: 'Statistics', url: '/api/statistics', method: 'GET' }
                ];

                let result = '–¢–µ—Å—Ç API endpoints:\\n';
                
                for (const endpoint of endpoints) {
                    try {
                        const response = await fetch(endpoint.url, { method: endpoint.method });
                        if (response.ok) {
                            result += `‚úÖ ${endpoint.name}: OK (${response.status})\\n`;
                        } else {
                            result += `‚ùå ${endpoint.name}: Failed (${response.status})\\n`;
                        }
                    } catch (error) {
                        result += `‚ùå ${endpoint.name}: Error - ${error.message}\\n`;
                    }
                }
                
                showResult('api-result', `<pre>${result}</pre>`, 'info');
            }
        </script>
    </body>
    </html>
    '''

@app.route('/api/health')
def api_health():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    return jsonify({
        'success': True,
        'app_name': '–¢–µ—Å—Ç–æ–≤—ã–π SmartApp',
        'version': '1.0.0',
        'excel_integration': 'active',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/statistics')
def api_statistics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫"""
    try:
        stats = excel_integration.get_statistics()
        return jsonify({
            'success': True,
            'statistics': stats
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/start', methods=['POST'])
def api_start():
    """API –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—è–≤–∫–∏"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        
        user_data_obj = get_user_data(user_id)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        return jsonify({
            'success': True,
            'message': '–ó–∞—è–≤–∫–∞ –Ω–∞—á–∞—Ç–∞',
            'user_id': user_id
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_start: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/select-location', methods=['POST'])
def api_select_location():
    """API –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        location = data.get('location')
        
        if not location or location.strip() == '':
            return jsonify({'success': False, 'error': '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}), 400
        
        user_data_obj = get_user_data(user_id)
        user_data_obj.location = location
        
        return jsonify({
            'success': True,
            'message': f'–õ–æ–∫–∞—Ü–∏—è {location} –≤—ã–±—Ä–∞–Ω–∞'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_select_location: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/select-oke', methods=['POST'])
def api_select_oke():
    """API –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        oke = data.get('oke')
        
        user_data_obj = get_user_data(user_id)
        user_data_obj.oke = oke
        
        return jsonify({
            'success': True,
            'message': f'–û–ö–≠ {oke} –≤—ã–±—Ä–∞–Ω–æ'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_select_oke: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/select-date', methods=['POST'])
def api_select_date():
    """API –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        date = data.get('date')
        
        user_data_obj = get_user_data(user_id)
        user_data_obj.selected_date = date
        
        return jsonify({
            'success': True,
            'message': f'–î–∞—Ç–∞ {date} –≤—ã–±—Ä–∞–Ω–∞'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_select_date: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/select-position', methods=['POST'])
def api_select_position():
    """API –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        position = data.get('position')
        
        user_data_obj = get_user_data(user_id)
        user_data_obj.position = position
        
        return jsonify({
            'success': True,
            'message': f'–î–æ–ª–∂–Ω–æ—Å—Ç—å {position} –≤—ã–±—Ä–∞–Ω–∞'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_select_position: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/input-fio', methods=['POST'])
def api_input_fio():
    """API –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        fio = data.get('fio')
        tab_num = data.get('tab_num')
        
        if not fio or not tab_num or fio.strip() == '' or tab_num.strip() == '':
            return jsonify({'success': False, 'error': '–§–ò–û –∏ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        user_data_obj = get_user_data(user_id)
        user_data_obj.fio = fio
        user_data_obj.tab_num = tab_num
        
        return jsonify({
            'success': True,
            'message': f'–§–ò–û {fio} –≤–≤–µ–¥–µ–Ω–æ'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_input_fio: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/select-direction', methods=['POST'])
def api_select_direction():
    """API –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        direction = data.get('direction')
        
        user_data_obj = get_user_data(user_id)
        user_data_obj.direction = direction
        
        return jsonify({
            'success': True,
            'message': f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction} –≤—ã–±—Ä–∞–Ω–æ'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_select_direction: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/input-wishes', methods=['POST'])
def api_input_wishes():
    """API –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        wishes = data.get('wishes')
        
        user_data_obj = get_user_data(user_id)
        user_data_obj.flight_wishes = wishes
        
        return jsonify({
            'success': True,
            'message': '–ü–æ–∂–µ–ª–∞–Ω–∏—è –≤–≤–µ–¥–µ–Ω—ã'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_input_wishes: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/confirm', methods=['POST'])
def api_confirm():
    """API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default_user')
        
        user_data_obj = get_user_data(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        if not all([user_data_obj.location, user_data_obj.oke, user_data_obj.selected_date,
                   user_data_obj.position, user_data_obj.fio, user_data_obj.tab_num,
                   user_data_obj.direction, user_data_obj.flight_wishes]):
            return jsonify({'success': False, 'error': '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã'}), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        try:
            full_flight_info = f"{user_data_obj.selected_date} {user_data_obj.flight_wishes}"
            
            if not excel_integration.add_application(
                oke=user_data_obj.oke,
                fio=user_data_obj.fio,
                tab_num=user_data_obj.tab_num,
                position=user_data_obj.position,
                direction=user_data_obj.direction,
                flight_info=full_flight_info
            ):
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Excel –¥–ª—è '{user_data_obj.oke}'")
                return jsonify({'success': False, 'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Excel'}), 500
            
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Excel: {user_data_obj.fio} - {user_data_obj.oke}")
            
            return jsonify({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Excel!'
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏: {e}")
            return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}'}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_confirm: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SmartApp...")
    print("üìä Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
    print("üåê URL: http://localhost:8081/")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    app.run(host='0.0.0.0', port=8081, debug=False)
