#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Express.ms API
–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è Express.ms —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Ö REST API
"""

import asyncio
import json
import logging
import aiohttp
from typing import Dict, Any, Optional
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ExpressMSBot:
    """–ë–æ—Ç –¥–ª—è Express.ms —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, bot_id: str, secret_key: str, webhook_url: str):
        self.bot_id = bot_id
        self.secret_key = secret_key
        self.webhook_url = webhook_url
        self.api_base_url = "https://api.express.ms"
        self.session = None
        
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession(
                headers={
                    'Authorization': f'Bearer {self.secret_key}',
                    'Content-Type': 'application/json',
                    'User-Agent': 'ExpressBot/1.0'
                }
            )
    
    async def register_bot(self) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤ Express.ms"""
        try:
            await self.create_session()
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
            bot_data = {
                "bot_id": self.bot_id,
                "name": "Flight Booking Bot",
                "description": "–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã",
                "webhook_url": self.webhook_url,
                "permissions": [
                    "read_messages",
                    "send_messages",
                    "read_user_info",
                    "access_files"
                ],
                "commands": [
                    {
                        "command": "/start",
                        "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
                    },
                    {
                        "command": "/help",
                        "description": "–°–ø—Ä–∞–≤–∫–∞"
                    }
                ]
            }
            
            async with self.session.post(
                f"{self.api_base_url}/v1/bots/register",
                json=bot_data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {result}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def check_bot_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            await self.create_session()
            
            async with self.session.get(
                f"{self.api_base_url}/v1/bots/{self.bot_id}/status"
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return {
                        "status": "error",
                        "message": f"HTTP {response.status}",
                        "online": False
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "status": "error",
                "message": str(e),
                "online": False
            }
    
    async def send_message(self, user_id: str, text: str, keyboard: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.create_session()
            
            message_data = {
                "user_id": user_id,
                "text": text,
                "parse_mode": "Markdown"
            }
            
            if keyboard:
                message_data["keyboard"] = keyboard
            
            async with self.session.post(
                f"{self.api_base_url}/v1/bots/{self.bot_id}/send",
                json=message_data
            ) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def set_webhook(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL"""
        try:
            await self.create_session()
            
            webhook_data = {
                "webhook_url": self.webhook_url,
                "events": [
                    "message",
                    "command",
                    "callback_query"
                ]
            }
            
            async with self.session.post(
                f"{self.api_base_url}/v1/bots/{self.bot_id}/webhook",
                json=webhook_data
            ) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.webhook_url}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            return False
    
    async def get_bot_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            await self.create_session()
            
            async with self.session.get(
                f"{self.api_base_url}/v1/bots/{self.bot_id}"
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return {
                        "status": "error",
                        "message": f"HTTP {response.status}"
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return {
                "status": "error",
                "message": str(e)
            }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    bot_id = "00c46d64-1127-5a96-812d-3d8b27c58b99"
    secret_key = "a75b4cd97d9e88e543f077178b2d5a4f"
    webhook_url = "https://comparing-doom-solving-royalty.trycloudflare.com/webhook"
    
    bot = ExpressMSBot(bot_id, secret_key, webhook_url)
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞...")
        status = await bot.check_bot_status()
        print(f"–°—Ç–∞—Ç—É—Å: {json.dumps(status, ensure_ascii=False, indent=2)}")
        
        print("\nüìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ...")
        info = await bot.get_bot_info()
        print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {json.dumps(info, ensure_ascii=False, indent=2)}")
        
        print("\nüîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...")
        webhook_result = await bot.set_webhook()
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_result}")
        
        print("\nüìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞...")
        register_result = await bot.register_bot()
        print(f"–ë–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {register_result}")
        
    finally:
        await bot.close()

if __name__ == "__main__":
    asyncio.run(main())


