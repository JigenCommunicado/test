#!/usr/bin/env python3
"""
Express Bot –¥–ª—è CloudPub - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Express.ms
–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

import os
import json
import logging
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from flask import Flask, request, jsonify, render_template_string
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config_manager import config_manager
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
    BOT_CONFIG = {
        'bot_id': config_manager.get('bot_settings.bot_id', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': config_manager.get('bot_settings.secret_key', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': config_manager.get('bot_settings.api_base_url', 'https://loosely-welcoming-grackle.cloudpub.ru'),
        'webhook_url': config_manager.get('bot_settings.webhook_url', 'https://loosely-welcoming-grackle.cloudpub.ru/webhook'),
        'cloudpub_url': config_manager.get('bot_settings.cloudpub_url', 'https://loosely-welcoming-grackle.cloudpub.ru'),
        'bot_name': config_manager.get('bot_settings.bot_name', 'Flight Booking Bot'),
        'bot_description': config_manager.get('bot_settings.bot_description', '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã')
    }
except ImportError:
    # Fallback –∫ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ config_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    BOT_CONFIG = {
        'bot_id': os.environ.get('EXPRESS_BOT_ID', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': os.environ.get('EXPRESS_SECRET_KEY', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': os.environ.get('FLASK_API_URL', 'https://loosely-welcoming-grackle.cloudpub.ru'),
        'webhook_url': os.environ.get('WEBHOOK_URL', 'https://loosely-welcoming-grackle.cloudpub.ru/webhook'),
        'cloudpub_url': os.environ.get('CLOUDPUB_URL', 'https://loosely-welcoming-grackle.cloudpub.ru'),
        'bot_name': 'Flight Booking Bot',
        'bot_description': '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã'
    }

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

class CloudPubFlightBookingBot:
    """–ö–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Express.ms —á–µ—Ä–µ–∑ CloudPub"""
    
    def __init__(self):
        self.api_url = BOT_CONFIG['api_base_url']
        self.webhook_url = BOT_CONFIG['webhook_url']
        self.cloudpub_url = BOT_CONFIG['cloudpub_url']
        self.user_sessions = {}
        self.stats = {
            'total_applications': 0,
            'active_sessions': 0,
            'start_time': datetime.now()
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
        try:
            from config_manager import config_manager
            self.directions = config_manager.get('directions', {})
            self.oke_by_location = config_manager.get('oke_by_location', {})
            self.positions = config_manager.get('positions', [])
        except ImportError:
            # Fallback –∫ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            self.directions = {
                '–ú–°–ö': [
                    '–ê–Ω–∞–¥—ã—Ä—å', '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–∞–≥–∞–¥–∞–Ω',
                    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–°–∞–º–∞—Ä–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–£—Ñ–∞', '–•–∞–±–∞—Ä–æ–≤—Å–∫',
                    '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–í–∞—Ä–∞–¥–µ—Ä–æ', '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'
                ],
                '–°–ü–ë': [
                    '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–æ—Å–∫–≤–∞', '–°–∞–º–∞—Ä–∞', '–°–æ—á–∏',
                    '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'
                ],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': [
                    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–°–æ—á–∏', '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–°–∞–Ω—å—è'
                ],
                '–°–æ—á–∏': []
            }
            self.oke_by_location = {
                '–ú–°–ö': ['–û–ö–≠ 1', '–û–ö–≠ 2', '–û–ö–≠ 3', '–û–õ–°–∏–¢'],
                '–°–ü–ë': ['–û–ö–≠ 4', '–û–ö–≠ 5', '–û–õ–°–∏–¢'],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': ['–û–ö–≠ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–û–õ–°–∏–¢'],
                '–°–æ—á–∏': ['–û–ö–≠ –°–æ—á–∏', '–û–õ–°–∏–¢']
            }
            self.positions = ['–ë–ü', '–ë–ü BS', '–°–ë–≠', '–ò–ü–ë']
    
    async def get_application_periods(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_url}/api/public/application-periods") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('periods', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
        return []
    
    async def submit_application(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–π—Å"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_url}/api/application", json=user_data) as response:
                    if response.status == 200:
                        return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"}
    
    def create_inline_keyboard(self, buttons_data: List[List[Dict[str, str]]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Express.ms"""
        keyboard = []
        for row in buttons_data:
            keyboard_row = []
            for button in row:
                keyboard_row.append({
                    "text": button["text"],
                    "callback_data": button["callback_data"]
                })
            keyboard.append(keyboard_row)
        
        return {
            "inline_keyboard": keyboard
        }
    
    def create_start_keyboard(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü–∏–∏"""
        buttons = [
            [
                {"text": "üèôÔ∏è –ú–æ—Å–∫–≤–∞", "callback_data": "location_–ú–°–ö"},
                {"text": "üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "callback_data": "location_–°–ü–ë"}
            ],
            [
                {"text": "üèûÔ∏è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "callback_data": "location_–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"},
                {"text": "üèñÔ∏è –°–æ—á–∏", "callback_data": "location_–°–æ—á–∏"}
            ]
        ]
        return self.create_inline_keyboard(buttons)
    
    def create_oke_keyboard(self, location: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
        oke_list = self.oke_by_location.get(location, ['–û–õ–°–∏–¢'])
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –û–ö–≠ (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(oke_list), 2):
            row = []
            for j in range(2):
                if i + j < len(oke_list):
                    oke = oke_list[i + j]
                    row.append({
                        "text": oke,
                        "callback_data": f"oke_{oke}"
                    })
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_start"}])
        
        return self.create_inline_keyboard(buttons)
    
    def create_calendar_keyboard(self, year: int = None, month: int = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        if year is None:
            year = datetime.now().year
        if month is None:
            month = datetime.now().month
            
        buttons = []
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        nav_buttons = [
            {"text": "‚¨ÖÔ∏è", "callback_data": f"nav_month_{year}_{month-1 if month > 1 else 12}_{year-1 if month == 1 else year}"},
            {"text": f"{month_names[month-1]} {year}", "callback_data": "ignore"},
            {"text": "‚û°Ô∏è", "callback_data": f"nav_month_{year}_{month+1 if month < 12 else 1}_{year+1 if month == 12 else year}"}
        ]
        buttons.append(nav_buttons)
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        weekdays_buttons = [{"text": day, "callback_data": "ignore"} for day in weekdays]
        buttons.append(weekdays_buttons)
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        first_day = datetime(year, month, 1)
        last_day = (first_day + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        days_in_month = last_day.day
        first_weekday = first_day.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
        current_date = first_day
        row = []
        
        # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
        for _ in range(first_weekday):
            row.append({"text": " ", "callback_data": "ignore"})
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        for day in range(1, days_in_month + 1):
            current_date = datetime(year, month, day)
            today = datetime.now()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: –î–î.–ú–ú.–ì–ì–ì–ì
            date_str = f"{day:02d}.{month:02d}.{year}"
            
            # –í—ã–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            if current_date.date() == today.date():
                button_text = f"‚úàÔ∏è {day}"
            else:
                button_text = str(day)
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
            callback_data = f"date_{date_str}" if current_date.date() >= today.date() else "ignore"
            
            row.append({
                "text": button_text,
                "callback_data": callback_data
            })
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
            if len(row) == 7:
                buttons.append(row)
                row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if row:
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_start"}])
        
        return self.create_inline_keyboard(buttons)
    
    def create_position_keyboard(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π (–ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥)
        for position in self.positions:
            buttons.append([{"text": position, "callback_data": f"position_{position}"}])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "callback_data": "back_to_date_selection"}])
        
        return self.create_inline_keyboard(buttons)
    
    def create_direction_keyboard(self, location: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        directions_list = self.directions.get(location, [])
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(directions_list), 2):
            row = []
            for j in range(2):
                if i + j < len(directions_list):
                    direction = directions_list[i + j]
                    row.append({
                        "text": direction,
                        "callback_data": f"direction_{direction}"
                    })
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons.append([{"text": "‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "callback_data": "manual_direction_input"}])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "callback_data": "back_to_date_selection"}])
        
        return self.create_inline_keyboard(buttons)
    
    def create_fio_keyboard(self, has_last_data: bool = False, last_fio: str = "", last_tab_num: str = "") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û"""
        buttons = []
        
        if has_last_data and last_fio and last_tab_num:
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            buttons.append([{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ", "callback_data": "confirm_last_fio_tabnum"}])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", "callback_data": "back_to_date_selection"}])
        
        return self.create_inline_keyboard(buttons)
    
    def create_confirmation_keyboard(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        buttons = [
            [
                {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": "confirm_application"},
                {"text": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "callback_data": "back_to_start"}
            ]
        ]
        return self.create_inline_keyboard(buttons)
    
    def process_express_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Express.ms"""
        try:
            message_type = message_data.get('type', '')
            user_id = message_data.get('user_id', '')
            text = message_data.get('text', '').strip()
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if text == '/start':
                return self.handle_start_command(user_id)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
            if message_type == 'callback_query':
                callback_data = message_data.get('callback_data', '')
                return self.handle_callback_query(user_id, callback_data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if user_id in self.user_sessions:
                return self.handle_text_message(user_id, text)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            return {
                "text": "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
                "reply_markup": self.create_start_keyboard()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "text": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                "reply_markup": self.create_start_keyboard()
            }
    
    def handle_start_command(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        periods = asyncio.run(self.get_application_periods())
        
        welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–π—Å–∞.

–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:

**–õ–∏–º–∏—Ç:** –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ—Å—è—Ü –Ω–∞ —Ä–µ–π—Å/—ç—Å—Ç–∞—Ñ–µ—Ç—É.

**–°—Ä–æ–∫–∏:** –° 20-–≥–æ –ø–æ 5-–µ —á–∏—Å–ª–æ (–≤–∫–ª.) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.

**–£—Å–ª–æ–≤–∏—è –ß–ö–≠:** 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞.
_–í–Ω–∏–º–∞–Ω–∏–µ: –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π._

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
‚Ä¢ –ù–∞–∑–µ–º–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞–∂–Ω–µ–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.
‚Ä¢ –ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ –∑–∞—è–≤–æ–∫ ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–º, —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ —Ä–µ–π—Å–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –Ω–µ—Ç –æ—Ç–ø—É—Å–∫–∞ –≤ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.

–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–∏–∂–µ: üëá"""
        
        if not periods:
            welcome_text += "\n\nüö´ **–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã.**"
            welcome_text += "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        return {
            "text": welcome_text,
            "reply_markup": self.create_start_keyboard()
        }
    
    def handle_callback_query(self, user_id: str, callback_data: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback'–æ–≤
        if callback_data == "back_to_start":
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
            return self.handle_start_command(user_id)
        
        elif callback_data.startswith("location_"):
            return self.handle_location_selection(user_id, callback_data)
        
        elif callback_data.startswith("oke_"):
            return self.handle_oke_selection(user_id, callback_data)
        
        elif callback_data.startswith("nav_month_"):
            return self.handle_calendar_navigation(user_id, callback_data)
        
        elif callback_data.startswith("date_"):
            return self.handle_date_selection(user_id, callback_data)
        
        elif callback_data.startswith("position_"):
            return self.handle_position_selection(user_id, callback_data)
        
        elif callback_data.startswith("direction_"):
            return self.handle_direction_selection(user_id, callback_data)
        
        elif callback_data == "manual_direction_input":
            return self.handle_manual_direction_input(user_id)
        
        elif callback_data == "confirm_last_fio_tabnum":
            return self.handle_confirm_last_fio(user_id)
        
        elif callback_data == "confirm_application":
            return self.handle_confirm_application(user_id)
        
        elif callback_data == "back_to_date_selection":
            return self.handle_back_to_date_selection(user_id)
        
        else:
            return {
                "text": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                "reply_markup": self.create_start_keyboard()
            }
    
    def handle_location_selection(self, user_id: str, callback_data: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        location = callback_data.replace("location_", "")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            'step': 'oke',
            'data': {'location': location}
        }
        
        return {
            "text": f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: **{location}**!\n\nüëå –û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ **–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ** –¥–ª—è *{location}*:",
            "reply_markup": self.create_oke_keyboard(location)
        }
    
    def handle_oke_selection(self, user_id: str, callback_data: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
        oke = callback_data.replace("oke_", "")
        
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        self.user_sessions[user_id]['data']['oke'] = oke
        self.user_sessions[user_id]['step'] = 'calendar'
        
        return {
            "text": f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ö–≠: **{oke}**!\n\nüóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:",
            "reply_markup": self.create_calendar_keyboard()
        }
    
    def handle_calendar_navigation(self, user_id: str, callback_data: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        parts = callback_data.split("_")
        year = int(parts[2])
        month = int(parts[3])
        
        return {
            "text": "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:",
            "reply_markup": self.create_calendar_keyboard(year, month)
        }
    
    def handle_date_selection(self, user_id: str, callback_data: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        date_str = callback_data.replace("date_", "")
        
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        self.user_sessions[user_id]['data']['date'] = date_str
        self.user_sessions[user_id]['step'] = 'position'
        
        return {
            "text": f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: **{date_str}**!\n\nüë®‚Äç‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É **–¥–æ–ª–∂–Ω–æ—Å—Ç—å**:",
            "reply_markup": self.create_position_keyboard()
        }
    
    def handle_position_selection(self, user_id: str, callback_data: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        position = callback_data.replace("position_", "")
        
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        self.user_sessions[user_id]['data']['position'] = position
        self.user_sessions[user_id]['step'] = 'fio'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_last_data = False  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        last_fio = ""
        last_tab_num = ""
        
        fio_text = """üìù –û—Ç–ª–∏—á–Ω–æ!
–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ **–§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä** –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:
```
–§–ò–û
–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
```
–ù–∞–ø—Ä–∏–º–µ—Ä:
```
–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í.
119356
```"""
        
        if has_last_data:
            fio_text += f"""
–ï—Å–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:
```
{last_fio}
{last_tab_num}
```
–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"""
        
        return {
            "text": fio_text,
            "reply_markup": self.create_fio_keyboard(has_last_data, last_fio, last_tab_num)
        }
    
    def handle_direction_selection(self, user_id: str, callback_data: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        direction = callback_data.replace("direction_", "")
        
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        self.user_sessions[user_id]['data']['direction'] = direction
        self.user_sessions[user_id]['step'] = 'wishes'
        
        return {
            "text": f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{direction}**!\n\nüìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:"
        }
    
    def handle_manual_direction_input(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        self.user_sessions[user_id]['step'] = 'manual_direction'
        
        return {
            "text": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è** —Ç–µ–∫—Å—Ç–æ–º:"
        }
    
    def handle_confirm_last_fio(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –§–ò–û"""
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        fio = "–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í."
        tab_num = "119356"
        
        self.user_sessions[user_id]['data']['fio'] = fio
        self.user_sessions[user_id]['data']['tab_num'] = tab_num
        self.user_sessions[user_id]['step'] = 'direction'
        
        location = self.user_sessions[user_id]['data']['location']
        
        return {
            "text": f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!\n\nüåç –í—ã–±–µ—Ä–∏—Ç–µ **–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** –≤–∞—à–µ–≥–æ —Ä–µ–π—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:",
            "reply_markup": self.create_direction_keyboard(location)
        }
    
    def handle_confirm_application(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        session = self.user_sessions[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        application_data = {
            **session['data'],
            'user_id': user_id,
            'timestamp': datetime.now().isoformat()
        }
        
        result = asyncio.run(self.submit_application(application_data))
        
        if result.get('success'):
            success_text = """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Ä–µ–π—Å–∞ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ –¶–ü –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ–ª–µ—Ç–æ–≤.

–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start."""
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
            
            self.stats['total_applications'] += 1
            
            return {
                "text": success_text,
                "reply_markup": self.create_start_keyboard()
            }
        else:
            error_text = f"""‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏**

–ü—Ä–∏—á–∏–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."""
            
            return {
                "text": error_text,
                "reply_markup": self.create_start_keyboard()
            }
    
    def handle_back_to_date_selection(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
        if user_id not in self.user_sessions:
            return self.handle_start_command(user_id)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        session = self.user_sessions[user_id]
        session['data'] = {
            'location': session['data'].get('location'),
            'oke': session['data'].get('oke')
        }
        session['step'] = 'calendar'
        
        return {
            "text": "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:",
            "reply_markup": self.create_calendar_keyboard()
        }
    
    def handle_text_message(self, user_id: str, text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if user_id not in self.user_sessions:
            return {
                "text": "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞",
                "reply_markup": self.create_start_keyboard()
            }
        
        session = self.user_sessions[user_id]
        step = session['step']
        
        if step == 'fio':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –∏ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            lines = text.split('\n')
            if len(lines) >= 2:
                fio = lines[0].strip()
                tab_num = lines[1].strip()
                
                session['data']['fio'] = fio
                session['data']['tab_num'] = tab_num
                session['step'] = 'direction'
                
                location = session['data']['location']
                return {
                    "text": f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!\n\nüåç –í—ã–±–µ—Ä–∏—Ç–µ **–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** –≤–∞—à–µ–≥–æ —Ä–µ–π—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:",
                    "reply_markup": self.create_direction_keyboard(location)
                }
            else:
                return {
                    "text": "‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ **–§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä** –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.\n\n–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n```\n–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í.\n119356\n```"
                }
        
        elif step == 'manual_direction':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            session['data']['direction'] = text
            session['step'] = 'wishes'
            
            return {
                "text": f"‚úÖ –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{text}**!\n\nüìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:"
            }
        
        elif step == 'wishes':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
            session['data']['wishes'] = text
            session['step'] = 'confirmation'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            data = session['data']
            summary = f"""‚ú® **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**

–õ–æ–∫–∞—Ü–∏—è: **{data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–û–ö–≠: **{data.get('oke', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–î–∞—Ç–∞: **{data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–î–æ–ª–∂–Ω–æ—Å—Ç—å: **{data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–§–ò–û: **{data.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: **{data.get('tab_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}**
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{data.get('direction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–ü–æ–∂–µ–ª–∞–Ω–∏—è: **{data.get('wishes', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}**"""
            
            return {
                "text": summary,
                "reply_markup": self.create_confirmation_keyboard()
            }
        
        else:
            return {
                "text": "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞",
                "reply_markup": self.create_start_keyboard()
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = CloudPubFlightBookingBot()

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "ok",
        "bot_id": BOT_CONFIG['bot_id'],
        "cloudpub_url": BOT_CONFIG['cloudpub_url'],
        "uptime": str(datetime.now() - bot.stats['start_time']),
        "active_sessions": len(bot.user_sessions),
        "total_applications": bot.stats['total_applications']
    })

@app.route('/manifest', methods=['GET'])
def manifest():
    """Manifest –¥–ª—è Express.ms"""
    return jsonify({
        "name": BOT_CONFIG['bot_name'],
        "description": BOT_CONFIG['bot_description'],
        "version": "1.0.0",
        "bot_id": BOT_CONFIG['bot_id'],
        "webhook_url": BOT_CONFIG['webhook_url'],
        "capabilities": [
            "message_handling",
            "inline_keyboards",
            "callback_queries",
            "application_submission"
        ]
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint –¥–ª—è Express.ms"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = bot.process_express_message(data)
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/admin', methods=['GET'])
def admin_panel():
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    admin_html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Express Bot Admin Panel</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; color: #333; margin-bottom: 30px; }
            .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
            .stat-card { background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }
            .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }
            .stat-label { color: #666; margin-top: 5px; }
            .info { background: #e7f3ff; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
            .info h3 { margin-top: 0; color: #0066cc; }
            .refresh-btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
            .refresh-btn:hover { background: #0056b3; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üöÄ Express Bot Admin Panel</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã</p>
            </div>
            
            <div class="info">
                <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</h3>
                <p><strong>Bot ID:</strong> """ + BOT_CONFIG['bot_id'] + """</p>
                <p><strong>CloudPub URL:</strong> """ + BOT_CONFIG['cloudpub_url'] + """</p>
                <p><strong>Webhook URL:</strong> """ + BOT_CONFIG['webhook_url'] + """</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: green;">üü¢ –û–Ω–ª–∞–π–Ω</span></p>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number" id="total-applications">""" + str(bot.stats['total_applications']) + """</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="active-sessions">""" + str(len(bot.user_sessions)) + """</div>
                    <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="uptime">""" + str(datetime.now() - bot.stats['start_time']).split('.')[0] + """</div>
                    <div class="stat-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                </div>
            </div>
            
            <div style="text-align: center;">
                <button class="refresh-btn" onclick="location.reload()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
        </div>
        
        <script>
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => location.reload(), 30000);
        </script>
    </body>
    </html>
    """
    return admin_html

@app.route('/api/stats', methods=['GET'])
def api_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return jsonify({
        "total_applications": bot.stats['total_applications'],
        "active_sessions": len(bot.user_sessions),
        "uptime": str(datetime.now() - bot.stats['start_time']),
        "start_time": bot.stats['start_time'].isoformat(),
        "bot_id": BOT_CONFIG['bot_id'],
        "cloudpub_url": BOT_CONFIG['cloudpub_url']
    })

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Express Bot –¥–ª—è CloudPub...")
    logger.info(f"üì± Bot ID: {BOT_CONFIG['bot_id']}")
    logger.info(f"üåê CloudPub URL: {BOT_CONFIG['cloudpub_url']}")
    logger.info(f"üîó Webhook URL: {BOT_CONFIG['webhook_url']}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=5011, debug=False)
