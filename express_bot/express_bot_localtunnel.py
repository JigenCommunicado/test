#!/usr/bin/env python3
"""
Express Bot —Å LocalTunnel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import asyncio
import aiohttp
import json
import logging
import os
import sys
from datetime import datetime
from aiohttp import web
from config_manager import ConfigManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('localtunnel_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ExpressBotLocalTunnel:
    def __init__(self):
        self.config_manager = ConfigManager()
        self.bot_id = self.config_manager.get('bot_settings.bot_id')
        self.secret_key = self.config_manager.get('bot_settings.secret_key')
        self.webhook_url = self.config_manager.get('bot_settings.webhook_url', 'https://express-bot-flight.loca.lt/webhook')
        self.api_base_url = self.config_manager.get('bot_settings.api_base_url', 'https://express-bot-flight.loca.lt')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_received': 0,
            'commands_processed': 0,
            'errors': 0,
            'start_time': datetime.now().isoformat(),
            'last_activity': None
        }
        
        logger.info(f"ü§ñ Bot ID: {self.bot_id}")
        logger.info(f"üîó Webhook URL: {self.webhook_url}")
        logger.info(f"üåê API Base URL: {self.api_base_url}")

    async def handle_webhook(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Express.ms"""
        try:
            data = await request.json()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {data}")
            
            self.stats['messages_received'] += 1
            self.stats['last_activity'] = datetime.now().isoformat()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            message_type = data.get('type', '')
            
            if message_type == 'message':
                await self.handle_message(data)
            elif message_type == 'command':
                await self.handle_command(data)
            elif message_type == 'callback_query':
                await self.handle_callback(data)
            else:
                logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
            
            return web.json_response({'status': 'ok'})
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            self.stats['errors'] += 1
            return web.json_response({'status': 'error', 'message': str(e)}, status=500)

    async def handle_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = data.get('text', '')
        user_id = data.get('user_id', '')
        
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
        
        if text.startswith('/'):
            await self.handle_command(data)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await self.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

    async def handle_command(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        text = data.get('text', '')
        user_id = data.get('user_id', '')
        
        logger.info(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ –æ—Ç {user_id}: {text}")
        self.stats['commands_processed'] += 1
        
        if text == '/start':
            await self.send_start_message(user_id)
        elif text == '/help':
            await self.send_help_message(user_id)
        elif text == '/status':
            await self.send_status_message(user_id)
        else:
            await self.send_message(user_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

    async def handle_callback(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        callback_data = data.get('callback_data', '')
        user_id = data.get('user_id', '')
        
        logger.info(f"üîò Callback –æ—Ç {user_id}: {callback_data}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
        await self.send_message(user_id, f"üîò –û–±—Ä–∞–±–æ—Ç–∞–Ω callback: {callback_data}")

    async def send_message(self, user_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API Express.ms
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {text}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def send_start_message(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = """
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flight Booking Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–π—Å.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

**–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
2. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        await self.send_message(user_id, message)

    async def send_help_message(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

**–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞
2. –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
‚Ä¢ –ú–æ—Å–∫–≤–∞ - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
‚Ä¢ –ú–æ—Å–∫–≤–∞ - –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ...

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await self.send_message(user_id, message)

    async def send_status_message(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        uptime = datetime.now() - datetime.fromisoformat(self.stats['start_time'])
        message = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

üü¢ **–°—Ç–∞—Ç—É—Å:** –û–Ω–ª–∞–π–Ω
‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime}
üì® **–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ:** {self.stats['messages_received']}
‚ö° **–ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {self.stats['commands_processed']}
‚ùå **–û—à–∏–±–æ–∫:** {self.stats['errors']}
üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {self.stats['last_activity'] or '–ù–µ—Ç'}

**Webhook URL:** {self.webhook_url}
**API Base URL:** {self.api_base_url}
        """
        await self.send_message(user_id, message)

    async def health_check(self, request):
        """Health check endpoint"""
        return web.json_response({
            'status': 'healthy',
            'bot_id': self.bot_id,
            'webhook_url': self.webhook_url,
            'uptime': datetime.now().isoformat(),
            'stats': self.stats
        })

    async def manifest(self, request):
        """Manifest –¥–ª—è Express.ms"""
        manifest = {
            "name": self.bot_config.get('bot_name', 'Flight Booking Bot'),
            "description": self.bot_config.get('bot_description', '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã'),
            "version": "1.0.0",
            "bot_id": self.bot_id,
            "webhook_url": self.webhook_url,
            "api_base_url": self.api_base_url,
            "capabilities": [
                "message_handling",
                "command_processing",
                "callback_handling",
                "webhook_support"
            ],
            "commands": [
                {
                    "command": "/start",
                    "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
                },
                {
                    "command": "/help",
                    "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
                },
                {
                    "command": "/status",
                    "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
                }
            ]
        }
        return web.json_response(manifest)

    async def admin_panel(self, request):
        """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Express Bot Admin Panel</title>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; color: #333; border-bottom: 2px solid #0088cc; padding-bottom: 20px; margin-bottom: 30px; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .stat-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #0088cc; }}
        .stat-value {{ font-size: 2em; font-weight: bold; color: #0088cc; }}
        .stat-label {{ color: #666; margin-top: 5px; }}
        .info {{ background: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px; }}
        .endpoint {{ background: #f0f0f0; padding: 10px; border-radius: 5px; font-family: monospace; margin: 5px 0; }}
        .status-online {{ color: #4caf50; font-weight: bold; }}
        .refresh-btn {{ background: #0088cc; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }}
        .refresh-btn:hover {{ background: #006699; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Express Bot Admin Panel</h1>
            <p>Flight Booking Bot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</p>
        </div>
        
        <div class="info">
            <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</h3>
            <div class="endpoint"><strong>Bot ID:</strong> {self.bot_id}</div>
            <div class="endpoint"><strong>Webhook URL:</strong> {self.webhook_url}</div>
            <div class="endpoint"><strong>API Base URL:</strong> {self.api_base_url}</div>
            <div class="endpoint"><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status-online">üü¢ –û–Ω–ª–∞–π–Ω</span></div>
        </div>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-value">{self.stats['messages_received']}</div>
                <div class="stat-label">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{self.stats['commands_processed']}</div>
                <div class="stat-label">–ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{self.stats['errors']}</div>
                <div class="stat-label">–û—à–∏–±–æ–∫</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{self.stats['start_time'][:19]}</div>
                <div class="stat-label">–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞</div>
            </div>
        </div>
        
        <div class="info">
            <h3>üîß Endpoints</h3>
            <div class="endpoint">GET /health - Health check</div>
            <div class="endpoint">GET /manifest - Manifest –¥–ª—è Express.ms</div>
            <div class="endpoint">POST /webhook - Webhook –æ—Ç Express.ms</div>
            <div class="endpoint">GET /admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</div>
            <div class="endpoint">GET /api/stats - API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
            <button class="refresh-btn" onclick="location.reload()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        </div>
    </div>
</body>
</html>
        """
        return web.Response(text=html, content_type='text/html')

    async def api_stats(self, request):
        """API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return web.json_response({
            'bot_id': self.bot_id,
            'status': 'online',
            'stats': self.stats,
            'webhook_url': self.webhook_url,
            'api_base_url': self.api_base_url,
            'timestamp': datetime.now().isoformat()
        })

    async def create_app(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app = web.Application()
        
        # CORS middleware
        @web.middleware
        async def cors_handler(request, handler):
            response = await handler(request)
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            return response
        
        app.middlewares.append(cors_handler)
        
        # Routes
        app.router.add_get('/health', self.health_check)
        app.router.add_get('/manifest', self.manifest)
        app.router.add_post('/webhook', self.handle_webhook)
        app.router.add_get('/admin', self.admin_panel)
        app.router.add_get('/api/stats', self.api_stats)
        
        return app

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = ExpressBotLocalTunnel()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = await bot.create_app()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 5011 –≤–º–µ—Å—Ç–æ 5010
        site = web.TCPSite(runner, '0.0.0.0', 5011)
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Express Bot —Å LocalTunnel...")
        logger.info(f"üì± Bot ID: {bot.bot_id}")
        logger.info(f"üîó Webhook URL: {bot.webhook_url}")
        logger.info(f"üåê Server: http://0.0.0.0:5011")
        logger.info(f"üë®‚Äçüíº Admin Panel: http://localhost:5011/admin")
        logger.info(f"üåê LocalTunnel: https://express-bot-flight.loca.lt")
        
        await site.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        finally:
            await runner.cleanup()
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
