#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
–°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
"""

import os
import json
import hashlib
import secrets
import logging
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum
from typing import Dict, List, Optional, Any
from threading import Lock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UserRole(Enum):
    """–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    ADMIN = "admin"           # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    MANAGER = "manager"       # –ú–µ–Ω–µ–¥–∂–µ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
    USER = "user"            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
    VIEWER = "viewer"        # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä

class UserStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    ACTIVE = "active"         # –ê–∫—Ç–∏–≤–Ω—ã–π
    INACTIVE = "inactive"     # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    BLOCKED = "blocked"       # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    PENDING = "pending"       # –û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

@dataclass
class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: str
    username: str
    email: str
    full_name: str
    role: UserRole
    status: UserStatus
    password_hash: str
    created_at: datetime
    last_login: Optional[datetime] = None
    login_attempts: int = 0
    locked_until: Optional[datetime] = None
    preferences: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.preferences is None:
            self.preferences = {}

@dataclass
class UserSession:
    """–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    token: str
    user_id: str
    created_at: datetime
    expires_at: datetime
    ip_address: str
    user_agent: str

class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, data_dir: str = "data"):
        self.data_dir = data_dir
        self.users_file = os.path.join(data_dir, "users.json")
        self.sessions_file = os.path.join(data_dir, "sessions.json")
        self.lock = Lock()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(data_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.users: Dict[str, User] = {}
        self.sessions: Dict[str, UserSession] = {}
        self.load_users()
        self.load_sessions()
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.create_default_admin()
        
        logger.info(f"üë• UserManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
    
    def load_users(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.users_file):
                with open(self.users_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for user_data in data.get('users', []):
                        user = User(
                            id=user_data['id'],
                            username=user_data['username'],
                            email=user_data['email'],
                            full_name=user_data['full_name'],
                            role=UserRole(user_data['role']),
                            status=UserStatus(user_data['status']),
                            password_hash=user_data['password_hash'],
                            created_at=datetime.fromisoformat(user_data['created_at']),
                            last_login=datetime.fromisoformat(user_data['last_login']) if user_data.get('last_login') else None,
                            login_attempts=user_data.get('login_attempts', 0),
                            locked_until=datetime.fromisoformat(user_data['locked_until']) if user_data.get('locked_until') else None,
                            preferences=user_data.get('preferences', {})
                        )
                        self.users[user.id] = user
                logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def save_users(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with self.lock:
                data = {
                    'users': []
                }
                for user in self.users.values():
                    user_data = asdict(user)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
                    user_data['created_at'] = user.created_at.isoformat()
                    user_data['last_login'] = user.last_login.isoformat() if user.last_login else None
                    user_data['locked_until'] = user.locked_until.isoformat() if user.locked_until else None
                    user_data['role'] = user.role.value
                    user_data['status'] = user.status.value
                    data['users'].append(user_data)
                
                with open(self.users_file, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def load_sessions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.sessions_file):
                with open(self.sessions_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for session_data in data.get('sessions', []):
                        session = UserSession(
                            token=session_data['token'],
                            user_id=session_data['user_id'],
                            created_at=datetime.fromisoformat(session_data['created_at']),
                            expires_at=datetime.fromisoformat(session_data['expires_at']),
                            ip_address=session_data['ip_address'],
                            user_agent=session_data['user_agent']
                        )
                        self.sessions[session.token] = session
                logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sessions)} —Å–µ—Å—Å–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
    
    def save_sessions(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with self.lock:
                data = {
                    'sessions': []
                }
                for session in self.sessions.values():
                    session_data = asdict(session)
                    session_data['created_at'] = session.created_at.isoformat()
                    session_data['expires_at'] = session.expires_at.isoformat()
                    data['sessions'].append(session_data)
                
                with open(self.sessions_file, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
    
    def create_default_admin(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        admin_id = "admin"
        if admin_id not in self.users:
            admin_user = User(
                id=admin_id,
                username="admin",
                email="admin@smartapp.local",
                full_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
                role=UserRole.ADMIN,
                status=UserStatus.ACTIVE,
                password_hash=self.hash_password("admin123"),
                created_at=datetime.now()
            )
            self.users[admin_id] = admin_user
            self.save_users()
            logger.info("üëë –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (admin/admin123)")
    
    def hash_password(self, password: str) -> str:
        """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å"""
        salt = secrets.token_hex(16)
        password_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt.encode('utf-8'), 100000)
        return f"{salt}:{password_hash.hex()}"
    
    def verify_password(self, password: str, password_hash: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å"""
        try:
            salt, hash_part = password_hash.split(':')
            password_hash_check = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt.encode('utf-8'), 100000)
            return password_hash_check.hex() == hash_part
        except:
            return False
    
    def create_user(self, username: str, email: str, full_name: str, password: str, role: UserRole = UserRole.USER) -> Optional[User]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            for user in self.users.values():
                if user.username == username or user.email == email:
                    return None
            
            user_id = secrets.token_hex(8)
            user = User(
                id=user_id,
                username=username,
                email=email,
                full_name=full_name,
                role=role,
                status=UserStatus.PENDING,
                password_hash=self.hash_password(password),
                created_at=datetime.now()
            )
            
            self.users[user_id] = user
            self.save_users()
            logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({role.value})")
            return user
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def authenticate_user(self, username: str, password: str, ip_address: str = "", user_agent: str = "") -> Optional[UserSession]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = None
            for u in self.users.values():
                if u.username == username or u.email == username:
                    user = u
                    break
            
            if not user:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if user.status != UserStatus.ACTIVE:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user.locked_until and user.locked_until > datetime.now():
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if not self.verify_password(password, user.password_hash):
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                user.login_attempts += 1
                if user.login_attempts >= 5:
                    user.locked_until = datetime.now() + timedelta(minutes=30)
                    logger.warning(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç")
                self.save_users()
                return None
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            user.login_attempts = 0
            user.locked_until = None
            user.last_login = datetime.now()
            self.save_users()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            token = secrets.token_urlsafe(32)
            session = UserSession(
                token=token,
                user_id=user.id,
                created_at=datetime.now(),
                expires_at=datetime.now() + timedelta(hours=24),
                ip_address=ip_address,
                user_agent=user_agent
            )
            
            self.sessions[token] = session
            self.save_sessions()
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return session
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None
    
    def get_user_by_token(self, token: str) -> Optional[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
        try:
            session = self.sessions.get(token)
            if not session:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if session.expires_at < datetime.now():
                del self.sessions[token]
                self.save_sessions()
                return None
            
            return self.users.get(session.user_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É: {e}")
            return None
    
    def logout_user(self, token: str) -> bool:
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if token in self.sessions:
                del self.sessions[token]
                self.save_sessions()
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}")
            return False
    
    def get_user_permissions(self, user: User) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        permissions = []
        
        if user.role == UserRole.ADMIN:
            permissions = [
                "users.create", "users.read", "users.update", "users.delete",
                "applications.create", "applications.read", "applications.update", "applications.delete",
                "reports.read", "settings.read", "settings.update"
            ]
        elif user.role == UserRole.MANAGER:
            permissions = [
                "applications.create", "applications.read", "applications.update",
                "reports.read"
            ]
        elif user.role == UserRole.USER:
            permissions = [
                "applications.create", "applications.read"
            ]
        elif user.role == UserRole.VIEWER:
            permissions = [
                "applications.read", "reports.read"
            ]
        
        return permissions
    
    def has_permission(self, user: User, permission: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return permission in self.get_user_permissions(user)
    
    def get_all_users(self) -> List[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return list(self.users.values())
    
    def update_user(self, user_id: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id not in self.users:
                return False
            
            user = self.users[user_id]
            for key, value in kwargs.items():
                if hasattr(user, key):
                    setattr(user, key, value)
            
            self.save_users()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def delete_user(self, user_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id not in self.users:
                return False
            
            # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if self.users[user_id].role == UserRole.ADMIN:
                return False
            
            del self.users[user_id]
            self.save_users()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_manager = UserManager()

def test_user_management():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_manager.create_user(
        username="testuser",
        email="test@example.com",
        full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        password="test123",
        role=UserRole.USER
    )
    
    if user:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.username}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        session = user_manager.authenticate_user("testuser", "test123")
        if session:
            print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {session.token[:10]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
            user_by_token = user_manager.get_user_by_token(session.token)
            if user_by_token:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É: {user_by_token.full_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
                permissions = user_manager.get_user_permissions(user_by_token)
                print(f"‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {permissions}")
            
            # –í—ã—Ö–æ–¥
            if user_manager.logout_user(session.token):
                print("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_user_management()


