import json
import os
import time
import logging
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum
from typing import Dict, List, Optional
import threading
import time

logger = logging.getLogger(__name__)

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    APPLICATION_OPEN = "application_open"  # –ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫
    APPLICATION_CLOSING_SOON = "application_closing_soon"  # –°–∫–æ—Ä–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    APPLICATION_CLOSED = "application_closed"  # –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
    APPLICATION_REMINDER = "application_reminder"  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
    SYSTEM_ANNOUNCEMENT = "system_announcement"  # –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

class NotificationStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    PENDING = "pending"  # –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    SENT = "sent"  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    DELIVERED = "delivered"  # –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    FAILED = "failed"  # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    READ = "read"  # –ü—Ä–æ—á–∏—Ç–∞–Ω–æ

class ScheduleType(Enum):
    """–¢–∏–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    ONCE = "once"  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ
    DAILY = "daily"  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
    WEEKLY = "weekly"  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
    MONTHLY = "monthly"  # –ï–∂–µ–º–µ—Å—è—á–Ω–æ

@dataclass
class Notification:
    """–ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    type: NotificationType
    title: str
    message: str
    user_id: Optional[str] = None  # –ï—Å–ª–∏ None - –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    data: Dict = None
    status: NotificationStatus = NotificationStatus.PENDING
    created_at: datetime = None
    sent_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.data is None:
            self.data = {}

@dataclass
class ApplicationPeriod:
    """–ü–µ—Ä–∏–æ–¥ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫"""
    id: str
    name: str
    start_date: datetime
    end_date: datetime
    is_active: bool = True
    reminder_hours: List[int] = None  # –ß–∞—Å—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    
    def __post_init__(self):
        if self.reminder_hours is None:
            self.reminder_hours = [24, 12, 6, 1]  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24, 12, 6 –∏ 1 —á–∞—Å

@dataclass
class NotificationSchedule:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    id: str
    name: str
    type: NotificationType
    title: str
    message: str
    schedule_type: ScheduleType
    schedule_config: Dict
    is_active: bool = True
    created_at: datetime = None
    last_sent: Optional[datetime] = None
    next_send: Optional[datetime] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.schedule_config is None:
            self.schedule_config = {}

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, data_file: str = "notifications.json"):
        self.data_file = data_file
        self.notifications: Dict[str, Notification] = {}
        self.application_periods: Dict[str, ApplicationPeriod] = {}
        self.notification_schedules: Dict[str, NotificationSchedule] = {}
        self.subscribers: Dict[str, List[str]] = {}  # user_id -> [subscription_ids]
        self.is_running = False
        self.worker_thread = None
        
        self.load_data()
        self._initialize_default_period()
        logger.info(f"üîî NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(self.notifications)}, –†–∞—Å–ø–∏—Å–∞–Ω–∏–π: {len(self.notification_schedules)}")
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                for notif_data in data.get('notifications', []):
                    notif = Notification(
                        id=notif_data['id'],
                        type=NotificationType(notif_data['type']),
                        title=notif_data['title'],
                        message=notif_data['message'],
                        user_id=notif_data.get('user_id'),
                        data=notif_data.get('data', {}),
                        status=NotificationStatus(notif_data['status']),
                        created_at=datetime.fromisoformat(notif_data['created_at']),
                        sent_at=datetime.fromisoformat(notif_data['sent_at']) if notif_data.get('sent_at') else None,
                        expires_at=datetime.fromisoformat(notif_data['expires_at']) if notif_data.get('expires_at') else None
                    )
                    self.notifications[notif.id] = notif
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫
                for period_data in data.get('application_periods', []):
                    period = ApplicationPeriod(
                        id=period_data['id'],
                        name=period_data['name'],
                        start_date=datetime.fromisoformat(period_data['start_date']),
                        end_date=datetime.fromisoformat(period_data['end_date']),
                        is_active=period_data['is_active'],
                        reminder_hours=period_data.get('reminder_hours', [24, 12, 6, 1])
                    )
                    self.application_periods[period.id] = period
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                self.subscribers = data.get('subscribers', {})
                
                logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, {len(self.application_periods)} –ø–µ—Ä–∏–æ–¥–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'notifications': [],
                'application_periods': [],
                'subscribers': self.subscribers
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for notif in self.notifications.values():
                notif_data = {
                    'id': notif.id,
                    'type': notif.type.value,
                    'title': notif.title,
                    'message': notif.message,
                    'user_id': notif.user_id,
                    'data': notif.data,
                    'status': notif.status.value,
                    'created_at': notif.created_at.isoformat(),
                    'sent_at': notif.sent_at.isoformat() if notif.sent_at else None,
                    'expires_at': notif.expires_at.isoformat() if notif.expires_at else None
                }
                data['notifications'].append(notif_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
            for period in self.application_periods.values():
                period_data = {
                    'id': period.id,
                    'name': period.name,
                    'start_date': period.start_date.isoformat(),
                    'end_date': period.end_date.isoformat(),
                    'is_active': period.is_active,
                    'reminder_hours': period.reminder_hours
                }
                data['application_periods'].append(period_data)
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
                
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def _initialize_default_period(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if not self.application_periods:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            now = datetime.now()
            start_date = now.replace(day=1, hour=9, minute=0, second=0, microsecond=0)
            if start_date.month == 12:
                end_date = start_date.replace(year=start_date.year + 1, month=1, day=31)
            else:
                end_date = start_date.replace(month=start_date.month + 1, day=31)
            
            period = ApplicationPeriod(
                id="default_period",
                name="–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏",
                start_date=start_date,
                end_date=end_date
            )
            self.application_periods[period.id] = period
            self.save_data()
    
    def create_notification(self, 
                          type: NotificationType, 
                          title: str, 
                          message: str, 
                          user_id: Optional[str] = None,
                          data: Dict = None,
                          expires_in_hours: int = 24) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notif_id = f"notif_{int(time.time() * 1000)}"
        
        notification = Notification(
            id=notif_id,
            type=type,
            title=title,
            message=message,
            user_id=user_id,
            data=data or {},
            expires_at=datetime.now() + timedelta(hours=expires_in_hours)
        )
        
        self.notifications[notif_id] = notification
        self.save_data()
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {title}")
        return notif_id
    
    def get_user_notifications(self, user_id: str, unread_only: bool = True) -> List[Notification]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_notifications = []
        
        for notif in self.notifications.values():
            if notif.user_id is None or notif.user_id == user_id:
                if not unread_only or notif.status == NotificationStatus.PENDING:
                    user_notifications.append(notif)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        user_notifications.sort(key=lambda x: x.created_at, reverse=True)
        return user_notifications
    
    def mark_as_read(self, notification_id: str, user_id: str) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        if notification_id in self.notifications:
            notif = self.notifications[notification_id]
            if notif.user_id is None or notif.user_id == user_id:
                notif.status = NotificationStatus.READ
                self.save_data()
                return True
        return False
    
    def subscribe_user(self, user_id: str, subscription_id: str) -> bool:
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if user_id not in self.subscribers:
            self.subscribers[user_id] = []
        
        if subscription_id not in self.subscribers[user_id]:
            self.subscribers[user_id].append(subscription_id)
            self.save_data()
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return True
        return False
    
    def unsubscribe_user(self, user_id: str, subscription_id: str) -> bool:
        """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if user_id in self.subscribers and subscription_id in self.subscribers[user_id]:
            self.subscribers[user_id].remove(subscription_id)
            self.save_data()
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return True
        return False
    
    def get_active_application_periods(self) -> List[ApplicationPeriod]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫"""
        now = datetime.now()
        active_periods = []
        
        for period in self.application_periods.values():
            if period.is_active and period.start_date <= now <= period.end_date:
                active_periods.append(period)
        
        return active_periods
    
    def check_application_periods(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –∏ —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        now = datetime.now()
        
        for period in self.application_periods.values():
            if not period.is_active:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            if period.start_date <= now <= period.start_date + timedelta(minutes=5):
                self.create_notification(
                    type=NotificationType.APPLICATION_OPEN,
                    title="üöÄ –ù–∞—á–∞–ª—Å—è –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫!",
                    message=f"–ü–µ—Ä–∏–æ–¥ '{period.name}' –Ω–∞—á–∞–ª—Å—è. –ó–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ {period.end_date.strftime('%d.%m.%Y %H:%M')}",
                    data={'period_id': period.id}
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏
            for hours in period.reminder_hours:
                reminder_time = period.end_date - timedelta(hours=hours)
                if reminder_time <= now <= reminder_time + timedelta(minutes=5):
                    self.create_notification(
                        type=NotificationType.APPLICATION_CLOSING_SOON,
                        title=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ {hours}—á",
                        message=f"–ü–µ—Ä–∏–æ–¥ '{period.name}' –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!",
                        data={'period_id': period.id, 'hours_left': hours}
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
            if period.end_date <= now <= period.end_date + timedelta(minutes=5):
                self.create_notification(
                    type=NotificationType.APPLICATION_CLOSED,
                    title="üîí –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                    message=f"–ü–µ—Ä–∏–æ–¥ '{period.name}' –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞—è–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
                    data={'period_id': period.id}
                )
                period.is_active = False
                self.save_data()
    
    def start_worker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_running:
            return
        
        self.is_running = True
        self.worker_thread = threading.Thread(target=self._worker_loop, daemon=True)
        self.worker_thread.start()
        logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def stop_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å"""
        self.is_running = False
        if self.worker_thread:
            self.worker_thread.join()
        logger.info("‚èπÔ∏è –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _worker_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫
                self.check_application_periods()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                self.check_scheduled_notifications()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                now = datetime.now()
                for notif in self.notifications.values():
                    if (notif.expires_at and 
                        notif.expires_at <= now and 
                        notif.status == NotificationStatus.PENDING):
                        notif.status = NotificationStatus.FAILED
                        logger.info(f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notif.id} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ")
                
                self.save_data()
                
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(60)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                time.sleep(60)
    
    def get_notification_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        stats = {
            'total': len(self.notifications),
            'pending': 0,
            'sent': 0,
            'delivered': 0,
            'failed': 0,
            'read': 0
        }
        
        for notif in self.notifications.values():
            stats[notif.status.value] += 1
        
        return stats

    # ==================== –ú–ï–¢–û–î–´ –†–ê–°–ü–ò–°–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

    def create_notification_schedule(self, 
                                   name: str,
                                   notification_type: NotificationType,
                                   title: str,
                                   message: str,
                                   schedule_type: str,
                                   schedule_config: Dict,
                                   is_active: bool = True) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        schedule_id = f"schedule_{int(time.time() * 1000)}"
        
        schedule = NotificationSchedule(
            id=schedule_id,
            name=name,
            type=notification_type,
            title=title,
            message=message,
            schedule_type=ScheduleType(schedule_type),
            schedule_config=schedule_config,
            is_active=is_active
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        schedule.next_send = self._calculate_next_send(schedule)
        
        self.notification_schedules[schedule_id] = schedule
        self.save_data()
        
        logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {name}")
        return schedule_id

    def get_notification_schedules(self) -> List[NotificationSchedule]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return list(self.notification_schedules.values())

    def update_notification_schedule(self, schedule_id: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if schedule_id not in self.notification_schedules:
            return False
        
        schedule = self.notification_schedules[schedule_id]
        
        for key, value in kwargs.items():
            if hasattr(schedule, key):
                if key == 'type':
                    setattr(schedule, key, NotificationType(value))
                elif key == 'schedule_type':
                    setattr(schedule, key, ScheduleType(value))
                else:
                    setattr(schedule, key, value)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        schedule.next_send = self._calculate_next_send(schedule)
        
        self.save_data()
        return True

    def delete_notification_schedule(self, schedule_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if schedule_id in self.notification_schedules:
            del self.notification_schedules[schedule_id]
            self.save_data()
            return True
        return False

    def test_notification_schedule(self, schedule_id: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å)"""
        if schedule_id not in self.notification_schedules:
            return False
        
        schedule = self.notification_schedules[schedule_id]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notif_id = self.create_notification(
            type=schedule.type,
            title=f"[–¢–ï–°–¢] {schedule.title}",
            message=f"[–¢–ï–°–¢] {schedule.message}",
            expires_in_hours=1
        )
        
        logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {schedule.name}")
        return True

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞–º–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
    def get_application_periods(self) -> List['ApplicationPeriod']:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        return list(self.application_periods.values())

    def create_application_period(self, name: str, start_date: str, end_date: str, 
                                description: str = '', is_active: bool = True) -> Optional['ApplicationPeriod']:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            period_id = f"period_{int(time.time())}"
            period = ApplicationPeriod(
                period_id=period_id,
                name=name,
                start_date=datetime.fromisoformat(start_date),
                end_date=datetime.fromisoformat(end_date),
                description=description,
                is_active=is_active
            )
            
            self.application_periods[period_id] = period
            self.save_application_periods()
            
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥ –∑–∞—è–≤–æ–∫ —Å–æ–∑–¥–∞–Ω: {name}")
            return period
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∑–∞—è–≤–æ–∫: {e}")
            return None

    def update_application_period(self, period_id: str, name: str = None, 
                                start_date: str = None, end_date: str = None,
                                description: str = None, is_active: bool = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            if period_id not in self.application_periods:
                return False
            
            period = self.application_periods[period_id]
            
            if name is not None:
                period.name = name
            if start_date is not None:
                period.start_date = datetime.fromisoformat(start_date)
            if end_date is not None:
                period.end_date = datetime.fromisoformat(end_date)
            if description is not None:
                period.description = description
            if is_active is not None:
                period.is_active = is_active
            
            self.save_application_periods()
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥ –∑–∞—è–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {period_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∑–∞—è–≤–æ–∫: {e}")
            return False

    def delete_application_period(self, period_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            if period_id not in self.application_periods:
                return False
            
            del self.application_periods[period_id]
            self.save_application_periods()
            
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥ –∑–∞—è–≤–æ–∫ —É–¥–∞–ª–µ–Ω: {period_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∑–∞—è–≤–æ–∫: {e}")
            return False

    def _calculate_next_send(self, schedule: NotificationSchedule) -> Optional[datetime]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        now = datetime.now()
        
        if schedule.schedule_type == ScheduleType.ONCE:
            # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            send_time = schedule.schedule_config.get('send_time')
            if send_time:
                try:
                    return datetime.fromisoformat(send_time)
                except:
                    return now + timedelta(minutes=1)
            return now + timedelta(minutes=1)
        
        elif schedule.schedule_type == ScheduleType.DAILY:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            hour = schedule.schedule_config.get('hour', 9)
            minute = schedule.schedule_config.get('minute', 0)
            
            next_send = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            if next_send <= now:
                next_send += timedelta(days=1)
            
            return next_send
        
        elif schedule.schedule_type == ScheduleType.WEEKLY:
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            weekday = schedule.schedule_config.get('weekday', 0)  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            hour = schedule.schedule_config.get('hour', 9)
            minute = schedule.schedule_config.get('minute', 0)
            
            days_ahead = weekday - now.weekday()
            if days_ahead <= 0:  # –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                days_ahead += 7
            
            next_send = now + timedelta(days=days_ahead)
            next_send = next_send.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            return next_send
        
        elif schedule.schedule_type == ScheduleType.MONTHLY:
            # –ï–∂–µ–º–µ—Å—è—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            day = schedule.schedule_config.get('day', 1)
            hour = schedule.schedule_config.get('hour', 9)
            minute = schedule.schedule_config.get('minute', 0)
            
            # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if now.month == 12:
                next_month = now.replace(year=now.year + 1, month=1, day=day, hour=hour, minute=minute, second=0, microsecond=0)
            else:
                next_month = now.replace(month=now.month + 1, day=day, hour=hour, minute=minute, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–µ—Å—è—Ü–µ, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            try:
                return next_month
            except ValueError:
                if now.month == 12:
                    next_month = now.replace(year=now.year + 1, month=1, day=1, hour=hour, minute=minute, second=0, microsecond=0)
                else:
                    next_month = now.replace(month=now.month + 1, day=1, hour=hour, minute=minute, second=0, microsecond=0)
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                while True:
                    try:
                        next_month = next_month.replace(day=next_month.day + 1)
                    except ValueError:
                        next_month = next_month.replace(day=next_month.day - 1)
                        break
                
                return next_month
        
        return None

    def check_scheduled_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        now = datetime.now()
        
        for schedule in self.notification_schedules.values():
            if not schedule.is_active:
                continue
            
            if schedule.next_send and schedule.next_send <= now:
                # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                self.create_notification(
                    type=schedule.type,
                    title=schedule.title,
                    message=schedule.message,
                    expires_in_hours=24
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                schedule.last_sent = now
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if schedule.schedule_type != ScheduleType.ONCE:
                    schedule.next_send = self._calculate_next_send(schedule)
                else:
                    schedule.is_active = False  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {schedule.name}")
        
        self.save_data()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
notification_manager.start_worker()
