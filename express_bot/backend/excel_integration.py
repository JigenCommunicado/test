#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏
–°–æ–∑–¥–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Excel —Ñ–∞–π–ª—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–π—Å—ã
"""

import os
import logging
from datetime import datetime
from typing import List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MASTER_EXCEL_FILENAME = "–≤—Å–µ_–∑–∞—è–≤–∫–∏.xlsx"
ALL_OKES = ['–û–ö–≠ 1', '–û–ö–≠ 2', '–û–ö–≠ 3', '–û–õ–°–∏–¢', '–û–ö–≠ 4', '–û–ö–≠ 5', '–û–ö–≠ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–û–ö–≠ –°–æ—á–∏']

try:
    from openpyxl import Workbook, load_workbook
    from openpyxl.styles import Font, PatternFill, Alignment
    OPENPYXL_AVAILABLE = True
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    OPENPYXL_AVAILABLE = False
    logger.warning("openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Excel —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

class ExcelIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã"""
    
    def __init__(self, data_dir: str = "data"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Args:
            data_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–æ–≤
        """
        self.data_dir = data_dir
        self.ensure_data_dir()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–æ–≤
        self.headers = [
            "–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏",
            "–§–ò–û", 
            "–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä",
            "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ"
        ]
        
        logger.info(f"üìä Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.data_dir}")
        
        self.master_file_path = os.path.join(self.data_dir, MASTER_EXCEL_FILENAME)
        self.workbook = None # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ _initialize_master_excel_file
        self._initialize_master_excel_file()

    def _initialize_master_excel_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª Excel –∏ —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –ª–∏—Å—Ç—ã –û–ö–≠"""
        if not OPENPYXL_AVAILABLE:
            logger.warning("openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª Excel –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return

        if os.path.exists(self.master_file_path):
            self.workbook = load_workbook(self.master_file_path)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª Excel: {self.master_file_path}")
        else:
            self.workbook = Workbook()
            # –£–¥–∞–ª—è–µ–º –ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if "Sheet" in self.workbook.sheetnames:
                self.workbook.remove(self.workbook["Sheet"])
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª Excel: {self.master_file_path}")

        for oke_name in ALL_OKES:
            if oke_name not in self.workbook.sheetnames:
                ws = self.workbook.create_sheet(title=oke_name)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                for col, header in enumerate(self.headers, 1):
                    cell = ws.cell(row=1, column=col, value=header)
                    cell.font = Font(bold=True, color="FFFFFF")
                    cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                    cell.alignment = Alignment(horizontal="center", vertical="center")

                # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ (–Ω–∞—á–∞–ª—å–Ω—ã–π)
                for col_idx, header in enumerate(self.headers, 1):
                    adjusted_width = min(len(header) + 2, 50)
                    ws.column_dimensions[ws.cell(row=1, column=col_idx).column_letter].width = adjusted_width

                logger.info(f"–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '{oke_name}' –≤ –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª–µ.")
        self.workbook.save(self.master_file_path)

    def ensure_data_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.data_dir}")
    
    def get_excel_file_path(self, oke: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –û–ö–≠
        
        Args:
            oke: –ù–∞–∑–≤–∞–Ω–∏–µ –û–ö–≠ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û–ö–≠ 1")
            
        Returns:
            –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        """
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –û–ö–≠ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_oke = "".join(c for c in oke if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_oke = safe_oke.replace(' ', '_')
        
        filename = f"{safe_oke}_–∑–∞—è–≤–∫–∏.xlsx"
        return os.path.join(self.data_dir, filename)
    
    def create_excel_file(self, oke: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –û–ö–≠
        
        Args:
            oke: –ù–∞–∑–≤–∞–Ω–∏–µ –û–ö–≠
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not OPENPYXL_AVAILABLE:
            logger.error("openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª.")
            return False
            
        try:
            file_path = self.get_excel_file_path(oke)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
            wb = Workbook()
            ws = wb.active
            ws.title = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–π—Å—ã"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for col, header in enumerate(self.headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            wb.save(file_path)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω Excel —Ñ–∞–π–ª: {file_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞ –¥–ª—è {oke}: {e}")
            return False
    
    def file_exists(self, oke: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –û–ö–≠ –≤ –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª–µ Excel
        
        Args:
            oke: –ù–∞–∑–≤–∞–Ω–∏–µ –û–ö–≠
            
        Returns:
            True –µ—Å–ª–∏ –ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not OPENPYXL_AVAILABLE or self.workbook is None:
            return False
        return oke in self.workbook.sheetnames
    
    def add_application(self, oke: str, fio: str, tab_num: str, position: str, 
                       direction: str, flight_info: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª–∞ Excel
        
        Args:
            oke: –ù–∞–∑–≤–∞–Ω–∏–µ –û–ö–≠
            fio: –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            tab_num: –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
            position: –î–æ–ª–∂–Ω–æ—Å—Ç—å
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            flight_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not OPENPYXL_AVAILABLE:
            logger.error("openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Excel.")
            return False
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
            wb = load_workbook(self.master_file_path)
            ws = wb[oke]
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            next_row = ws.max_row + 1
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data = [timestamp, fio, tab_num, position, direction, flight_info]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for col, value in enumerate(data, 1):
                cell = ws.cell(row=next_row, column=col, value=value)
                cell.alignment = Alignment(horizontal="left", vertical="center")
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for col_idx, value in enumerate(data, 1):
                column_letter = ws.cell(row=next_row, column=col_idx).column_letter
                max_length = max((len(str(cell.value)) for cell in ws[column_letter] if cell.value is not None), default=0)
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            wb.save(self.master_file_path)
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {oke} (Excel): {fio} - {direction}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ {oke} (Excel): {e}")
            return False
    
    def get_applications_count(self, oke: str) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ Excel —Ñ–∞–π–ª–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –û–ö–≠
        
        Args:
            oke: –ù–∞–∑–≤–∞–Ω–∏–µ –û–ö–≠
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ (–±–µ–∑ —É—á–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        """
        if not OPENPYXL_AVAILABLE or self.workbook is None:
            logger.error("openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫.")
            return 0
            
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.workbook = load_workbook(self.master_file_path)

            if oke not in self.workbook.sheetnames:
                return 0
                
            ws = self.workbook[oke]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            return max(0, ws.max_row - 1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è {oke} (Excel): {e}")
            return 0
    
    def get_all_files(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Excel —Ñ–∞–π–ª–æ–≤ —Å –∑–∞—è–≤–∫–∞–º–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ Excel —Ñ–∞–π–ª–∞–º
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª—É, –µ—Å–ª–∏ openpyxl –¥–æ—Å—Ç—É–ø–µ–Ω
        if not OPENPYXL_AVAILABLE or self.workbook is None or not os.path.exists(self.master_file_path):
            return []
        return [self.master_file_path]
    
    def read_applications(self, oke: str) -> List[dict]:
        """
        –ß–∏—Ç–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –û–ö–≠
        
        Args:
            oke: –ù–∞–∑–≤–∞–Ω–∏–µ –û–ö–≠
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–æ–∫
        """
        try:
            if not OPENPYXL_AVAILABLE or self.workbook is None or not os.path.exists(self.master_file_path):
                return []
            
            if oke not in self.workbook.sheetnames:
                return []
            
            ws = self.workbook[oke]
            applications = []
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤–∞—è - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
            for row in range(2, ws.max_row + 1):
                app_data = {}
                for col, header in enumerate(self.headers, 1):
                    cell_value = ws.cell(row=row, column=col).value
                    app_data[header] = str(cell_value) if cell_value is not None else ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –§–ò–û
                if app_data.get('–§–ò–û', '').strip():
                    applications.append(app_data)
            
            logger.info(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(applications)} –∑–∞—è–≤–æ–∫ –∏–∑ {oke}")
            return applications
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏–∑ {oke} (Excel): {e}")
            return []
    
    def get_statistics(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∑–∞—è–≤–∫–∞–º
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            stats = {
                "total_files": 0,
                "total_applications": 0,
                "by_oke": {}
            }
            
            if not OPENPYXL_AVAILABLE or self.workbook is None or not os.path.exists(self.master_file_path):
                return stats

            stats["total_files"] = 1  # –û–¥–∏–Ω –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª
            
            for oke_name in ALL_OKES:
                if oke_name in self.workbook.sheetnames:
                    count = self.get_applications_count(oke_name)
                    stats["by_oke"][oke_name] = count
                    stats["total_applications"] += count
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (Excel): {e}")
            return {"total_files": 0, "total_applications": 0, "by_oke": {}}


def test_excel_integration():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)...")
    
    excel = ExcelIntegration()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    if os.path.exists(excel.master_file_path):
        os.remove(excel.master_file_path)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª: {excel.master_file_path}")
    
    excel = ExcelIntegration() # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –û–ö–≠ 1
    print("üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ –û–ö–≠ 1...")
    if excel.add_application(
        oke="–û–ö–≠ 1",
        fio="–¢–µ—Å—Ç–æ–≤ –¢–µ.–¢.",
        tab_num="123456",
        position="–ë–ü",
        direction="–ú–æ—Å–∫–≤–∞",
        flight_info="15.09.2024 –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ–π—Å"
    ):
        print("‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –û–ö–≠ 1 —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –û–ö–≠ 1")
        return

    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –û–õ–°–∏–¢
    print("üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ –û–õ–°–∏–¢...")
    if excel.add_application(
        oke="–û–õ–°–∏–¢",
        fio="–¢–µ—Å—Ç–æ–≤–∞ –ê.–ê.",
        tab_num="654321",
        position="–°–ë–≠",
        direction="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        flight_info="20.10.2024 –í–µ—á–µ—Ä–Ω–∏–π —Ä–µ–π—Å"
    ):
        print("‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –û–õ–°–∏–¢ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –û–õ–°–∏–¢")
        return
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats = excel.get_statistics()
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫ –≤ –ª–∏—Å—Ç–∞—Ö
    if stats["by_oke"].get("–û–ö–≠ 1") == 1 and stats["by_oke"].get("–û–õ–°–∏–¢") == 1:
        print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ –ª–∏—Å—Ç–∞—Ö –≤–µ—Ä–Ω–æ–µ")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ –ª–∏—Å—Ç–∞—Ö")

    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    test_excel_integration()
