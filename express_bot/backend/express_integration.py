"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Express –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º
–í–∫–ª—é—á–∞–µ—Ç webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–æ—Ç–æ–º
"""

import json
import logging
import time
import hashlib
import hmac
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import requests
from flask import request, jsonify

logger = logging.getLogger(__name__)

@dataclass
class ExpressMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Express –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
    message_id: str
    user_id: str
    chat_id: str
    text: str
    timestamp: datetime
    message_type: str = "text"
    attachments: List[Dict] = None

@dataclass
class ExpressUser:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Express –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
    user_id: str
    username: str
    first_name: str
    last_name: str
    language_code: str = "ru"
    is_bot: bool = False

class ExpressWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Express –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
    
    def __init__(self, webhook_secret: str = None):
        self.webhook_secret = webhook_secret
        self.message_handlers = {}
        
    def verify_signature(self, payload: str, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook"""
        if not self.webhook_secret:
            return True  # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            
        expected_signature = hmac.new(
            self.webhook_secret.encode('utf-8'),
            payload.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        return hmac.compare_digest(signature, expected_signature)
    
    def parse_message(self, data: Dict) -> Optional[ExpressMessage]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Express"""
        try:
            message_data = data.get('message', {})
            if not message_data:
                return None
                
            return ExpressMessage(
                message_id=str(message_data.get('message_id', '')),
                user_id=str(message_data.get('from', {}).get('id', '')),
                chat_id=str(message_data.get('chat', {}).get('id', '')),
                text=message_data.get('text', ''),
                timestamp=datetime.fromtimestamp(message_data.get('date', 0)),
                message_type=message_data.get('type', 'text'),
                attachments=message_data.get('attachments', [])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def register_handler(self, command: str, handler_func):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        self.message_handlers[command.lower()] = handler_func
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {command}")
    
    def handle_message(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.text.strip()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text.startswith('/'):
                command = text.split()[0].lower()
                if command in self.message_handlers:
                    return self.message_handlers[command](message)
                else:
                    return self._unknown_command_response(message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            return self._handle_text_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    
    def _unknown_command_response(self, message: ExpressMessage) -> Dict:
        """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        return {
            "method": "sendMessage",
            "chat_id": message.chat_id,
            "text": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        }
    
    def _handle_text_message(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return {
            "method": "sendMessage",
            "chat_id": message.chat_id,
            "text": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        }

class ExpressBot:
    """–ë–æ—Ç –¥–ª—è Express –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
    
    def __init__(self, bot_token: str, api_url: str = "https://api.express-messenger.com"):
        self.bot_token = bot_token
        self.api_url = api_url
        self.webhook_handler = ExpressWebhookHandler()
        self._register_default_handlers()
        
    def _register_default_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.webhook_handler.register_handler('/start', self._handle_start)
        self.webhook_handler.register_handler('/help', self._handle_help)
        self.webhook_handler.register_handler('/status', self._handle_status)
        self.webhook_handler.register_handler('/application', self._handle_application)
        self.webhook_handler.register_handler('/my_applications', self._handle_my_applications)
        self.webhook_handler.register_handler('/periods', self._handle_periods)
        
    def _handle_start(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        return {
            "method": "sendMessage",
            "chat_id": message.chat_id,
            "text": """üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Express SmartApp!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/application - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
/my_applications - –ú–æ–∏ –∑–∞—è–≤–∫–∏
/periods - –ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /application"""
        }
    
    def _handle_help(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        return {
            "method": "sendMessage",
            "chat_id": message.chat_id,
            "text": """üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ Express SmartApp:

üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üìù /application - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–π—Å
üìä /my_applications - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏
üìÖ /periods - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–∞—Ö –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
‚ö° /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /application"""
        }
    
    def _handle_status(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            status = "üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            
            return {
                "method": "sendMessage",
                "chat_id": message.chat_id,
                "text": f"""‚ö° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

{status}

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üìä –°–µ—Ä–≤–µ—Ä: Express SmartApp v1.0.0"""
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "method": "sendMessage",
                "chat_id": message.chat_id,
                "text": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"
            }
    
    def _handle_application(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /application"""
        return {
            "method": "sendMessage",
            "chat_id": message.chat_id,
            "text": """üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å:

–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
üåê https://your-domain.com/flight_booking_ui.html

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é:
üì± https://your-domain.com/mobile_booking_ui.html

üí° –í —Ñ–æ—Ä–º–µ –≤—ã–±–µ—Ä–∏—Ç–µ:
‚Ä¢ –õ–æ–∫–∞—Ü–∏—é (–ú–æ—Å–∫–≤–∞, –°–ü–±, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –°–æ—á–∏)
‚Ä¢ –û–ö–≠
‚Ä¢ –î–∞—Ç—É —Ä–µ–π—Å–∞
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –ü–æ–∂–µ–ª–∞–Ω–∏—è

–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"""
        }
    
    def _handle_my_applications(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_applications"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return {
                "method": "sendMessage",
                "chat_id": message.chat_id,
                "text": """üìä –í–∞—à–∏ –∑–∞—è–≤–∫–∏:

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:
üîß https://your-domain.com/admin_panel.html

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫:
üîç https://your-domain.com/search_interface.html

üí° –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!"""
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return {
                "method": "sendMessage",
                "chat_id": message.chat_id,
                "text": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫"
            }
    
    def _handle_periods(self, message: ExpressMessage) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /periods"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
            return {
                "method": "sendMessage",
                "chat_id": message.chat_id,
                "text": """üìÖ –ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫:

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞–º–∏:
üóìÔ∏è https://your-domain.com/application_periods.html

üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
            return {
                "method": "sendMessage",
                "chat_id": message.chat_id,
                "text": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–∏–æ–¥–∞—Ö"
            }
    
    def send_message(self, chat_id: str, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            url = f"{self.api_url}/bot{self.bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_notification(self, user_id: str, title: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            text = f"üîî <b>{title}</b>\n\n{message}"
            return self.send_message(user_id, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

class ExpressNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Express"""
    
    def __init__(self, bot: ExpressBot):
        self.bot = bot
        self.subscribers = {}  # user_id -> subscription_data
        
    def subscribe_user(self, user_id: str, chat_id: str, preferences: Dict = None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.subscribers[user_id] = {
            "chat_id": chat_id,
            "preferences": preferences or {},
            "subscribed_at": datetime.now()
        }
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    def unsubscribe_user(self, user_id: str):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if user_id in self.subscribers:
            del self.subscribers[user_id]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    def send_application_notification(self, user_id: str, application_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
        if user_id not in self.subscribers:
            return False
            
        title = "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞"
        message = f"""–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {application_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –û–ö–≠: {application_data.get('oke', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –î–∞—Ç–∞: {application_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {application_data.get('direction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üÜî ID –∑–∞—è–≤–∫–∏: {application_data.get('application_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"""
        
        return self.bot.send_notification(
            self.subscribers[user_id]["chat_id"],
            title,
            message
        )
    
    def send_period_notification(self, user_id: str, period_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–∏–æ–¥–µ –∑–∞—è–≤–æ–∫"""
        if user_id not in self.subscribers:
            return False
            
        title = "üìÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞—è–≤–æ–∫"
        message = f"""–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!

üìã –ü–µ—Ä–∏–æ–¥: {period_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ –ù–∞—á–∞–ª–æ: {period_data.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {period_data.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É: /application"""
        
        return self.bot.send_notification(
            self.subscribers[user_id]["chat_id"],
            title,
            message
        )
    
    def broadcast_notification(self, title: str, message: str, user_filter: callable = None):
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        sent_count = 0
        failed_count = 0
        
        for user_id, subscription in self.subscribers.items():
            if user_filter and not user_filter(user_id, subscription):
                continue
                
            if self.bot.send_notification(subscription["chat_id"], title, message):
                sent_count += 1
            else:
                failed_count += 1
        
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
        return {"sent": sent_count, "failed": failed_count}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
express_bot = None
notification_service = None

def init_express_integration(bot_token: str, webhook_secret: str = None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Express"""
    global express_bot, notification_service
    
    express_bot = ExpressBot(bot_token)
    notification_service = ExpressNotificationService(express_bot)
    
    if webhook_secret:
        express_bot.webhook_handler.webhook_secret = webhook_secret
    
    logger.info("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Express –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return express_bot, notification_service

def get_express_bot():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    return express_bot

def get_notification_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_service

