version: '3.8'

services:
  express-bot:
    build: .
    container_name: express-bot
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - BOT_CREDENTIALS=${BOT_CREDENTIALS}
      - HOST=${HOST}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NGROK_URL=${NGROK_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - express-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ngrok:
    image: ngrok/ngrok:latest
    container_name: express-bot-ngrok
    restart: unless-stopped
    command:
      - "start"
      - "--all"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
      - ./ngrok-logs:/var/log/ngrok
    ports:
      - "4040:4040"  # ngrok web interface
    networks:
      - express-network
    depends_on:
      - express-bot

  postgres:
    image: postgres:15
    container_name: express-bot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-express_bot_db}
      - POSTGRES_USER=${POSTGRES_USER:-express_bot_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - express-network
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    container_name: express-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - express-network
    ports:
      - "6379:6379"

volumes:
  postgres_data:
  redis_data:

networks:
  express-network:
    driver: bridge
