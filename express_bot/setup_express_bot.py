#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ Express.ms
"""

import asyncio
import json
import logging
import aiohttp
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ExpressBotSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è Express.ms"""
    
    def __init__(self):
        self.bot_id = "00c46d64-1127-5a96-812d-3d8b27c58b99"
        self.secret_key = "a75b4cd97d9e88e543f077178b2d5a4f"
        self.webhook_url = "https://comparing-doom-solving-royalty.trycloudflare.com/webhook"
        self.api_base_url = "https://api.express.ms"
        self.session = None
        
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession(
                headers={
                    'Authorization': f'Bearer {self.secret_key}',
                    'Content-Type': 'application/json',
                    'User-Agent': 'ExpressBot/1.0'
                },
                timeout=aiohttp.ClientTimeout(total=30)
            )
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Express.ms API"""
        try:
            await self.create_session()
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Express.ms API...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints
            endpoints = [
                f"{self.api_base_url}/v1/health",
                f"{self.api_base_url}/health",
                f"{self.api_base_url}/status",
                f"https://express.ms/api/v1/health",
                f"https://express.ms/health"
            ]
            
            for endpoint in endpoints:
                try:
                    async with self.session.get(endpoint) as response:
                        logger.info(f"‚úÖ Endpoint {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        if response.status == 200:
                            text = await response.text()
                            logger.info(f"–û—Ç–≤–µ—Ç: {text[:200]}...")
                            return True
                except Exception as e:
                    logger.warning(f"‚ùå Endpoint {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    continue
            
            logger.error("‚ùå –í—Å–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def register_bot(self) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤ Express.ms"""
        try:
            await self.create_session()
            logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ Express.ms...")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
            bot_data = {
                "bot_id": self.bot_id,
                "name": "Flight Booking Bot",
                "description": "–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã",
                "webhook_url": self.webhook_url,
                "permissions": [
                    "read_messages",
                    "send_messages", 
                    "read_user_info",
                    "access_files"
                ],
                "commands": [
                    {
                        "command": "/start",
                        "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
                    },
                    {
                        "command": "/help", 
                        "description": "–°–ø—Ä–∞–≤–∫–∞"
                    },
                    {
                        "command": "/new",
                        "description": "–ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–π—Å"
                    }
                ],
                "manifest": {
                    "name": "Flight Booking Bot",
                    "version": "1.0.0",
                    "description": "–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã",
                    "icon": "‚úàÔ∏è",
                    "color": "#0088cc",
                    "author": "Express Bot Team"
                }
            }
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            register_endpoints = [
                f"{self.api_base_url}/v1/bots/register",
                f"{self.api_base_url}/v1/bots",
                f"{self.api_base_url}/bots/register",
                f"https://express.ms/api/v1/bots/register"
            ]
            
            for endpoint in register_endpoints:
                try:
                    logger.info(f"–ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ {endpoint}...")
                    async with self.session.post(endpoint, json=bot_data) as response:
                        logger.info(f"–û—Ç–≤–µ—Ç {endpoint}: {response.status}")
                        if response.status in [200, 201]:
                            result = await response.json()
                            logger.info(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {result}")
                            return True
                        else:
                            error_text = await response.text()
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {endpoint}: {response.status} - {error_text}")
                except Exception as e:
                    logger.warning(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {endpoint}: {e}")
                    continue
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω endpoint")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def set_webhook(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL"""
        try:
            await self.create_session()
            logger.info("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...")
            
            webhook_data = {
                "webhook_url": self.webhook_url,
                "events": [
                    "message",
                    "command", 
                    "callback_query"
                ]
            }
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è webhook
            webhook_endpoints = [
                f"{self.api_base_url}/v1/bots/{self.bot_id}/webhook",
                f"{self.api_base_url}/v1/bots/webhook",
                f"{self.api_base_url}/bots/{self.bot_id}/webhook"
            ]
            
            for endpoint in webhook_endpoints:
                try:
                    logger.info(f"–ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook —á–µ—Ä–µ–∑ {endpoint}...")
                    async with self.session.post(endpoint, json=webhook_data) as response:
                        logger.info(f"–û—Ç–≤–µ—Ç {endpoint}: {response.status}")
                        if response.status in [200, 201]:
                            result = await response.json()
                            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result}")
                            return True
                        else:
                            error_text = await response.text()
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook —á–µ—Ä–µ–∑ {endpoint}: {response.status} - {error_text}")
                except Exception as e:
                    logger.warning(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook —á–µ—Ä–µ–∑ {endpoint}: {e}")
                    continue
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω endpoint")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            return False
    
    async def check_bot_status(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            await self.create_session()
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_endpoints = [
                f"{self.api_base_url}/v1/bots/{self.bot_id}/status",
                f"{self.api_base_url}/v1/bots/{self.bot_id}",
                f"{self.api_base_url}/bots/{self.bot_id}/status"
            ]
            
            for endpoint in status_endpoints:
                try:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ {endpoint}...")
                    async with self.session.get(endpoint) as response:
                        logger.info(f"–û—Ç–≤–µ—Ç {endpoint}: {response.status}")
                        if response.status == 200:
                            result = await response.json()
                            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {result}")
                            return result
                        else:
                            error_text = await response.text()
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ {endpoint}: {response.status} - {error_text}")
                except Exception as e:
                    logger.warning(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ {endpoint}: {e}")
                    continue
            
            return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å"}
            
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    async def create_manifest_file(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è Express.ms"""
        try:
            logger.info("üìÑ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...")
            
            manifest = {
                "name": "Flight Booking Bot",
                "version": "1.0.0",
                "description": "–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã",
                "icon": "‚úàÔ∏è",
                "color": "#0088cc",
                "author": "Express Bot Team",
                "bot_id": self.bot_id,
                "webhook_url": self.webhook_url,
                "api_url": f"{self.webhook_url.replace('/webhook', '')}/api",
                "manifest_url": f"{self.webhook_url.replace('/webhook', '')}/manifest",
                "permissions": [
                    "read_messages",
                    "send_messages",
                    "read_user_info", 
                    "access_files"
                ],
                "commands": [
                    {
                        "command": "/start",
                        "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
                    },
                    {
                        "command": "/help",
                        "description": "–°–ø—Ä–∞–≤–∫–∞"
                    },
                    {
                        "command": "/new",
                        "description": "–ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–π—Å"
                    }
                ],
                "endpoints": {
                    "webhook": "/webhook",
                    "health": "/health",
                    "manifest": "/manifest",
                    "admin": "/admin"
                }
            }
            
            with open('/root/test/express_bot/express_bot_manifest.json', 'w', encoding='utf-8') as f:
                json.dump(manifest, f, ensure_ascii=False, indent=2)
            
            logger.info("‚úÖ –§–∞–π–ª –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω: express_bot_manifest.json")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Express Bot...")
    
    setup = ExpressBotSetup()
    
    try:
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("\n=== –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===")
        connection_ok = await setup.test_connection()
        
        # 2. –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        logger.info("\n=== –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ú–ê–ù–ò–§–ï–°–¢–ê ===")
        manifest_ok = await setup.create_manifest_file()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        logger.info("\n=== –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–û–¢–ê ===")
        status = await setup.check_bot_status()
        
        # 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞
        logger.info("\n=== –≠–¢–ê–ü 4: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ë–û–¢–ê ===")
        register_ok = await setup.register_bot()
        
        # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        logger.info("\n=== –≠–¢–ê–ü 5: –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK ===")
        webhook_ok = await setup.set_webhook()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "="*50)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: {'‚úÖ OK' if connection_ok else '‚ùå FAIL'}")
        logger.info(f"üìÑ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {'‚úÖ OK' if manifest_ok else '‚ùå FAIL'}")
        logger.info(f"ü§ñ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞: {'‚úÖ OK' if register_ok else '‚ùå FAIL'}")
        logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ OK' if webhook_ok else '‚ùå FAIL'}")
        logger.info(f"üì± Bot ID: {setup.bot_id}")
        logger.info(f"üåê Webhook URL: {setup.webhook_url}")
        logger.info("="*50)
        
        if connection_ok and manifest_ok:
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            logger.info("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç –≤ Express.ms —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
            logger.info("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ Express.ms")
            logger.info("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            logger.info("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            logger.info("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Bot ID –∏ Secret Key")
            logger.info("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook URL –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ")
            logger.info("3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Express.ms")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        await setup.close()

if __name__ == "__main__":
    asyncio.run(main())


