#!/usr/bin/env python3
"""
Express Bot Fixed - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Express.ms
"""

import os
import json
import logging
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from aiohttp import web, ClientSession
from aiohttp.web import Request, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config_manager import config_manager
    BOT_CONFIG = {
        'bot_id': config_manager.get('bot_settings.bot_id', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': config_manager.get('bot_settings.secret_key', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': config_manager.get('bot_settings.api_base_url', 'http://localhost:5002'),
        'webhook_url': config_manager.get('bot_settings.webhook_url', 'https://comparing-doom-solving-royalty.trycloudflare.com/webhook'),
        'bot_name': config_manager.get('bot_settings.bot_name', 'Flight Booking Bot'),
        'bot_description': config_manager.get('bot_settings.bot_description', '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã')
    }
except ImportError:
    BOT_CONFIG = {
        'bot_id': os.environ.get('EXPRESS_BOT_ID', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': os.environ.get('EXPRESS_SECRET_KEY', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': os.environ.get('FLASK_API_URL', 'http://localhost:5002'),
        'webhook_url': os.environ.get('WEBHOOK_URL', 'https://comparing-doom-solving-royalty.trycloudflare.com/webhook'),
        'bot_name': 'Flight Booking Bot',
        'bot_description': '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã'
    }

class ExpressMSBotFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è Express.ms —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.bot_id = BOT_CONFIG['bot_id']
        self.secret_key = BOT_CONFIG['secret_key']
        self.webhook_url = BOT_CONFIG['webhook_url']
        self.api_base_url = BOT_CONFIG['api_base_url']
        self.express_api_url = "https://api.express.ms"
        self.user_sessions = {}
        self.session = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config_manager import config_manager
            self.directions = config_manager.get('directions', {})
            self.oke_by_location = config_manager.get('oke_by_location', {})
            self.positions = config_manager.get('positions', [])
        except ImportError:
            self.directions = {
                '–ú–°–ö': ['–ê–Ω–∞–¥—ã—Ä—å', '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–∞–≥–∞–¥–∞–Ω',
                       '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–°–∞–º–∞—Ä–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–£—Ñ–∞', '–•–∞–±–∞—Ä–æ–≤—Å–∫',
                       '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–í–∞—Ä–∞–¥–µ—Ä–æ', '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'],
                '–°–ü–ë': ['–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–æ—Å–∫–≤–∞', '–°–∞–º–∞—Ä–∞', '–°–æ—á–∏',
                       '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': ['–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–°–æ—á–∏', '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–°–∞–Ω—å—è'],
                '–°–æ—á–∏': []
            }
            self.oke_by_location = {
                '–ú–°–ö': ['–û–ö–≠ 1', '–û–ö–≠ 2', '–û–ö–≠ 3', '–û–õ–°–∏–¢'],
                '–°–ü–ë': ['–û–ö–≠ 4', '–û–ö–≠ 5', '–û–õ–°–∏–¢'],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': ['–û–ö–≠ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–û–õ–°–∏–¢'],
                '–°–æ—á–∏': ['–û–ö–≠ –°–æ—á–∏', '–û–õ–°–∏–¢']
            }
            self.positions = ['–ë–ü', '–ë–ü BS', '–°–ë–≠', '–ò–ü–ë']
    
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –¥–ª—è Express.ms API"""
        if not self.session:
            self.session = aiohttp.ClientSession(
                headers={
                    'Authorization': f'Bearer {self.secret_key}',
                    'Content-Type': 'application/json',
                    'User-Agent': 'ExpressBot/1.0'
                },
                timeout=aiohttp.ClientTimeout(total=30)
            )
    
    async def send_message_to_express(self, user_id: str, text: str, keyboard: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Express.ms API"""
        try:
            await self.create_session()
            
            message_data = {
                "user_id": user_id,
                "text": text,
                "parse_mode": "Markdown"
            }
            
            if keyboard:
                message_data["keyboard"] = keyboard
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            send_endpoints = [
                f"{self.express_api_url}/v1/bots/{self.bot_id}/send",
                f"{self.express_api_url}/v1/messages/send",
                f"https://express.ms/api/v1/bots/{self.bot_id}/send"
            ]
            
            for endpoint in send_endpoints:
                try:
                    async with self.session.post(endpoint, json=message_data) as response:
                        if response.status in [200, 201]:
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            return True
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {endpoint}: {response.status}")
                except Exception as e:
                    logger.warning(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ {endpoint}: {e}")
                    continue
            
            # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
            logger.info(f"üìù Fallback: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {text}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def get_application_periods(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base_url}/api/public/application-periods") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('periods', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
        return []
    
    async def submit_application(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–π—Å"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_base_url}/api/application", json=user_data) as response:
                    if response.status == 200:
                        return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"}
    
    def create_keyboard(self, buttons_data: List[List[Dict]]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Express.ms"""
        return {
            "inline_keyboard": buttons_data
        }
    
    def create_start_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
        return self.create_keyboard([
            [
                {"text": "üèôÔ∏è –ú–æ—Å–∫–≤–∞", "callback_data": "location_–ú–°–ö"},
                {"text": "üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "callback_data": "location_–°–ü–ë"}
            ],
            [
                {"text": "üèûÔ∏è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "callback_data": "location_–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"},
                {"text": "üèñÔ∏è –°–æ—á–∏", "callback_data": "location_–°–æ—á–∏"}
            ]
        ])
    
    def create_oke_keyboard(self, location: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
        oke_list = self.oke_by_location.get(location, ['–û–õ–°–∏–¢'])
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –û–ö–≠ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(oke_list), 2):
            row = []
            for j in range(2):
                if i + j < len(oke_list):
                    oke = oke_list[i + j]
                    row.append({"text": oke, "callback_data": f"oke_{oke}"})
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_start"}])
        
        return self.create_keyboard(buttons)
    
    def create_calendar_keyboard(self, year: int = None, month: int = None) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        if year is None:
            year = datetime.now().year
        if month is None:
            month = datetime.now().month
            
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        buttons = []
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        buttons.append([
            {"text": "‚¨ÖÔ∏è", "callback_data": f"nav_month_{year}_{month-1 if month > 1 else 12}_{year-1 if month == 1 else year}"},
            {"text": f"{month_names[month-1]} {year}", "callback_data": "ignore"},
            {"text": "‚û°Ô∏è", "callback_data": f"nav_month_{year}_{month+1 if month < 12 else 1}_{year+1 if month == 12 else year}"}
        ])
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        buttons.append([
            {"text": "–ü–Ω", "callback_data": "ignore"},
            {"text": "–í—Ç", "callback_data": "ignore"},
            {"text": "–°—Ä", "callback_data": "ignore"},
            {"text": "–ß—Ç", "callback_data": "ignore"},
            {"text": "–ü—Ç", "callback_data": "ignore"},
            {"text": "–°–±", "callback_data": "ignore"},
            {"text": "–í—Å", "callback_data": "ignore"}
        ])
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        first_day = datetime(year, month, 1)
        last_day = (first_day + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        days_in_month = last_day.day
        first_weekday = first_day.weekday()
        
        current_date = first_day
        row = []
        
        # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
        for _ in range(first_weekday):
            row.append({"text": " ", "callback_data": "ignore"})
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        for day in range(1, days_in_month + 1):
            current_date = datetime(year, month, day)
            today = datetime.now()
            
            date_str = f"{day:02d}.{month:02d}.{year}"
            
            if current_date.date() == today.date():
                button_text = f"‚úàÔ∏è {day}"
            else:
                button_text = str(day)
            
            callback_data = f"date_{date_str}" if current_date.date() >= today.date() else "ignore"
            
            row.append({"text": button_text, "callback_data": callback_data})
            
            if len(row) == 7:
                buttons.append(row)
                row = []
        
        if row:
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_start"}])
        
        return self.create_keyboard(buttons)
    
    def create_position_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        buttons = []
        
        for position in self.positions:
            buttons.append([{"text": position, "callback_data": f"position_{position}"}])
        
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "callback_data": "back_to_date_selection"}])
        
        return self.create_keyboard(buttons)
    
    def create_direction_keyboard(self, location: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        directions_list = self.directions.get(location, [])
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(directions_list), 2):
            row = []
            for j in range(2):
                if i + j < len(directions_list):
                    direction = directions_list[i + j]
                    row.append({"text": direction, "callback_data": f"direction_{direction}"})
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        buttons.append([{"text": "‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "callback_data": "manual_direction_input"}])
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "callback_data": "back_to_date_selection"}])
        
        return self.create_keyboard(buttons)
    
    def create_confirmation_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        return self.create_keyboard([
            [
                {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": "confirm_application"},
                {"text": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "callback_data": "back_to_start"}
            ]
        ])
    
    async def handle_webhook(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Express.ms"""
        try:
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(data, ensure_ascii=False)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = data.get('type', 'unknown')
            user_id = data.get('user_id', data.get('from', {}).get('id', 'unknown'))
            
            if event_type == 'message':
                text = data.get('text', data.get('message', {}).get('text', ''))
                await self.handle_message(user_id, text)
                
            elif event_type == 'command':
                command = data.get('command', '')
                await self.handle_command(user_id, command)
                
            elif event_type == 'callback_query':
                callback_data = data.get('callback_query', {}).get('data', '')
                await self.handle_callback_query(user_id, callback_data)
            
            return {"status": "ok", "message": "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ"}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return {"status": "error", "message": str(e)}
    
    async def handle_message(self, user_id: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if text.startswith('/'):
            await self.handle_command(user_id, text)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if user_id in self.user_sessions:
                session = self.user_sessions[user_id]
                step = session['step']
                
                if step == 'fio':
                    await self.handle_fio_input(user_id, text)
                elif step == 'manual_direction':
                    await self.handle_manual_direction_input(user_id, text)
                elif step == 'wishes':
                    await self.handle_wishes_input(user_id, text)
            else:
                await self.send_start_message(user_id)
    
    async def handle_command(self, user_id: str, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        if command == '/start':
            await self.send_start_message(user_id)
        elif command == '/help':
            await self.send_help_message(user_id)
        else:
            await self.send_start_message(user_id)
    
    async def handle_callback_query(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
        
        if callback_data == "back_to_start":
            await self.send_start_message(user_id)
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
        
        elif callback_data.startswith("location_"):
            await self.handle_location_selection(user_id, callback_data)
        
        elif callback_data.startswith("oke_"):
            await self.handle_oke_selection(user_id, callback_data)
        
        elif callback_data.startswith("nav_month_"):
            await self.handle_calendar_navigation(user_id, callback_data)
        
        elif callback_data.startswith("date_"):
            await self.handle_date_selection(user_id, callback_data)
        
        elif callback_data.startswith("position_"):
            await self.handle_position_selection(user_id, callback_data)
        
        elif callback_data.startswith("direction_"):
            await self.handle_direction_selection(user_id, callback_data)
        
        elif callback_data == "manual_direction_input":
            await self.handle_manual_direction_request(user_id)
        
        elif callback_data == "confirm_application":
            await self.handle_confirm_application(user_id)
        
        elif callback_data == "back_to_date_selection":
            await self.handle_back_to_date_selection(user_id)
    
    async def send_start_message(self, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        periods = await self.get_application_periods()
        
        welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–π—Å–∞.

–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:

**–õ–∏–º–∏—Ç:** –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ—Å—è—Ü –Ω–∞ —Ä–µ–π—Å/—ç—Å—Ç–∞—Ñ–µ—Ç—É.

**–°—Ä–æ–∫–∏:** –° 20-–≥–æ –ø–æ 5-–µ —á–∏—Å–ª–æ (–≤–∫–ª.) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.

**–£—Å–ª–æ–≤–∏—è –ß–ö–≠:** 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞.
_–í–Ω–∏–º–∞–Ω–∏–µ: –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π._

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
‚Ä¢ –ù–∞–∑–µ–º–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞–∂–Ω–µ–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.
‚Ä¢ –ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ –∑–∞—è–≤–æ–∫ ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–º, —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ —Ä–µ–π—Å–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –Ω–µ—Ç –æ—Ç–ø—É—Å–∫–∞ –≤ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.

–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–∏–∂–µ: üëá"""
        
        if not periods:
            welcome_text += "\n\nüö´ **–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã.**"
            welcome_text += "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        keyboard = self.create_start_keyboard()
        await self.send_message_to_express(user_id, welcome_text, keyboard)
    
    async def send_help_message(self, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
2. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–π—Å–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
4. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
5. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
6. –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –°—Ä–æ–∫–∏: —Å 20-–≥–æ –ø–æ 5-–µ —á–∏—Å–ª–æ
‚Ä¢ 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ß–ö–≠

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"""
        
        await self.send_message_to_express(user_id, help_text)
    
    async def handle_location_selection(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        location = callback_data.replace("location_", "")
        
        self.user_sessions[user_id] = {
            'step': 'oke',
            'data': {'location': location}
        }
        
        keyboard = self.create_oke_keyboard(location)
        text = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: **{location}**!\n\nüëå –û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ **–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ** –¥–ª—è *{location}*:"
        
        await self.send_message_to_express(user_id, text, keyboard)
    
    async def handle_oke_selection(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
        oke = callback_data.replace("oke_", "")
        
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        self.user_sessions[user_id]['data']['oke'] = oke
        self.user_sessions[user_id]['step'] = 'calendar'
        
        keyboard = self.create_calendar_keyboard()
        text = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ö–≠: **{oke}**!\n\nüóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:"
        
        await self.send_message_to_express(user_id, text, keyboard)
    
    async def handle_calendar_navigation(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        parts = callback_data.split("_")
        year = int(parts[2])
        month = int(parts[3])
        
        keyboard = self.create_calendar_keyboard(year, month)
        text = "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:"
        
        await self.send_message_to_express(user_id, text, keyboard)
    
    async def handle_date_selection(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        date_str = callback_data.replace("date_", "")
        
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        self.user_sessions[user_id]['data']['date'] = date_str
        self.user_sessions[user_id]['step'] = 'position'
        
        keyboard = self.create_position_keyboard()
        text = f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: **{date_str}**!\n\nüë®‚Äç‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É **–¥–æ–ª–∂–Ω–æ—Å—Ç—å**:"
        
        await self.send_message_to_express(user_id, text, keyboard)
    
    async def handle_position_selection(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        position = callback_data.replace("position_", "")
        
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        self.user_sessions[user_id]['data']['position'] = position
        self.user_sessions[user_id]['step'] = 'fio'
        
        text = """üìù –û—Ç–ª–∏—á–Ω–æ!
–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ **–§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä** –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:
```
–§–ò–û
–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
```
–ù–∞–ø—Ä–∏–º–µ—Ä:
```
–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í.
119356
```"""
        
        await self.send_message_to_express(user_id, text)
    
    async def handle_fio_input(self, user_id: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
        lines = text.split('\n')
        if len(lines) >= 2:
            fio = lines[0].strip()
            tab_num = lines[1].strip()
            
            self.user_sessions[user_id]['data']['fio'] = fio
            self.user_sessions[user_id]['data']['tab_num'] = tab_num
            self.user_sessions[user_id]['step'] = 'direction'
            
            location = self.user_sessions[user_id]['data']['location']
            keyboard = self.create_direction_keyboard(location)
            text = f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!\n\nüåç –í—ã–±–µ—Ä–∏—Ç–µ **–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** –≤–∞—à–µ–≥–æ —Ä–µ–π—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:"
            
            await self.send_message_to_express(user_id, text, keyboard)
        else:
            error_text = """‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ **–§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä** –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.

–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
```
–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í.
119356
```"""
            await self.send_message_to_express(user_id, error_text)
    
    async def handle_direction_selection(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        direction = callback_data.replace("direction_", "")
        
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        self.user_sessions[user_id]['data']['direction'] = direction
        self.user_sessions[user_id]['step'] = 'wishes'
        
        text = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{direction}**!\n\nüìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:"
        
        await self.send_message_to_express(user_id, text)
    
    async def handle_manual_direction_request(self, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        self.user_sessions[user_id]['step'] = 'manual_direction'
        
        text = "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è** —Ç–µ–∫—Å—Ç–æ–º:"
        await self.send_message_to_express(user_id, text)
    
    async def handle_manual_direction_input(self, user_id: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        self.user_sessions[user_id]['data']['direction'] = text
        self.user_sessions[user_id]['step'] = 'wishes'
        
        text = f"‚úÖ –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{text}**!\n\nüìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:"
        await self.send_message_to_express(user_id, text)
    
    async def handle_wishes_input(self, user_id: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π"""
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        self.user_sessions[user_id]['data']['wishes'] = text
        self.user_sessions[user_id]['step'] = 'confirmation'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data = self.user_sessions[user_id]['data']
        summary = f"""‚ú® **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**

–õ–æ–∫–∞—Ü–∏—è: **{data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–û–ö–≠: **{data.get('oke', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–î–∞—Ç–∞: **{data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–î–æ–ª–∂–Ω–æ—Å—Ç—å: **{data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–§–ò–û: **{data.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: **{data.get('tab_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}**
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{data.get('direction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–ü–æ–∂–µ–ª–∞–Ω–∏—è: **{data.get('wishes', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}**"""
        
        keyboard = self.create_confirmation_keyboard()
        await self.send_message_to_express(user_id, summary, keyboard)
    
    async def handle_confirm_application(self, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        session = self.user_sessions[user_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await self.send_message_to_express(user_id, "‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        application_data = {
            **session['data'],
            'user_id': user_id,
            'timestamp': datetime.now().isoformat()
        }
        
        result = await self.submit_application(application_data)
        
        if result.get('success'):
            success_text = """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Ä–µ–π—Å–∞ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ –¶–ü –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ–ª–µ—Ç–æ–≤.

–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start."""
            
            keyboard = self.create_start_keyboard()
            await self.send_message_to_express(user_id, success_text, keyboard)
        else:
            error_text = f"""‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏**

–ü—Ä–∏—á–∏–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."""
            
            keyboard = self.create_start_keyboard()
            await self.send_message_to_express(user_id, error_text, keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
    
    async def handle_back_to_date_selection(self, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
        if user_id not in self.user_sessions:
            await self.send_start_message(user_id)
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        session = self.user_sessions[user_id]
        session['data'] = {
            'location': session['data'].get('location'),
            'oke': session['data'].get('oke')
        }
        session['step'] = 'calendar'
        
        keyboard = self.create_calendar_keyboard()
        text = "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:"
        await self.send_message_to_express(user_id, text, keyboard)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = ExpressMSBotFixed()

async def webhook_handler(request: Request) -> Response:
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤"""
    try:
        data = await request.json()
        result = await bot.handle_webhook(data)
        return web.json_response(result)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.json_response({"status": "error", "message": str(e)}, status=500)

async def health_handler(request: Request) -> Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    return web.json_response({
        "status": "ok",
        "service": "Express Bot Fixed",
        "bot_id": bot.bot_id,
        "timestamp": datetime.now().isoformat()
    })

async def manifest_handler(request: Request) -> Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±–æ—Ç–∞"""
    manifest = {
        "name": bot.bot_name,
        "version": "1.0.0",
        "description": bot.bot_description,
        "icon": "‚úàÔ∏è",
        "color": "#0088cc",
        "author": "Express Bot Team",
        "bot_id": bot.bot_id,
        "webhook_url": bot.webhook_url,
        "commands": [
            {"command": "/start", "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
            {"command": "/help", "description": "–°–ø—Ä–∞–≤–∫–∞"}
        ]
    }
    return web.json_response(manifest)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
    async def cors_handler(request, handler):
        response = await handler(request)
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
        return response
    
    app.middlewares.append(cors_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post('/webhook', webhook_handler)
    app.router.add_get('/health', health_handler)
    app.router.add_get('/manifest', manifest_handler)
    app.router.add_get('/', health_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '0.0.0.0', 5008)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Express Bot Fixed...")
    logger.info(f"üì± Bot ID: {bot.bot_id}")
    logger.info(f"üîó Webhook URL: {bot.webhook_url}")
    logger.info(f"üåê Server: http://0.0.0.0:5008")
    
    await site.start()
    
    try:
        await asyncio.Future()  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        await bot.close()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
