#!/usr/bin/env python3
"""
Express Bot —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import os
import json
import logging
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from aiohttp import web, ClientSession
from aiohttp.web import Request, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config_manager import config_manager
    BOT_CONFIG = {
        'bot_id': config_manager.get('bot_settings.bot_id', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': config_manager.get('bot_settings.secret_key', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': config_manager.get('bot_settings.api_base_url', 'http://localhost:5002'),
        'webhook_url': config_manager.get('bot_settings.webhook_url', 'https://comparing-doom-solving-royalty.trycloudflare.com/webhook'),
        'bot_name': config_manager.get('bot_settings.bot_name', 'Flight Booking Bot'),
        'bot_description': config_manager.get('bot_settings.bot_description', '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã')
    }
except ImportError:
    BOT_CONFIG = {
        'bot_id': os.environ.get('EXPRESS_BOT_ID', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': os.environ.get('EXPRESS_SECRET_KEY', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': os.environ.get('FLASK_API_URL', 'http://localhost:5002'),
        'webhook_url': os.environ.get('WEBHOOK_URL', 'https://comparing-doom-solving-royalty.trycloudflare.com/webhook'),
        'bot_name': 'Flight Booking Bot',
        'bot_description': '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã'
    }

class ExpressMSBotWithAdmin:
    """–ë–æ—Ç –¥–ª—è Express.ms —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é"""
    
    def __init__(self):
        self.bot_id = BOT_CONFIG['bot_id']
        self.secret_key = BOT_CONFIG['secret_key']
        self.webhook_url = BOT_CONFIG['webhook_url']
        self.api_base_url = BOT_CONFIG['api_base_url']
        self.express_api_url = "https://api.express.ms"
        self.user_sessions = {}
        self.session = None
        self.stats = {
            'total_messages': 0,
            'total_applications': 0,
            'active_users': 0,
            'start_time': datetime.now().isoformat()
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config_manager import config_manager
            self.directions = config_manager.get('directions', {})
            self.oke_by_location = config_manager.get('oke_by_location', {})
            self.positions = config_manager.get('positions', [])
        except ImportError:
            self.directions = {
                '–ú–°–ö': ['–ê–Ω–∞–¥—ã—Ä—å', '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–∞–≥–∞–¥–∞–Ω',
                       '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–°–∞–º–∞—Ä–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–£—Ñ–∞', '–•–∞–±–∞—Ä–æ–≤—Å–∫',
                       '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–í–∞—Ä–∞–¥–µ—Ä–æ', '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'],
                '–°–ü–ë': ['–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–æ—Å–∫–≤–∞', '–°–∞–º–∞—Ä–∞', '–°–æ—á–∏',
                       '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': ['–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–°–æ—á–∏', '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–°–∞–Ω—å—è'],
                '–°–æ—á–∏': []
            }
            self.oke_by_location = {
                '–ú–°–ö': ['–û–ö–≠ 1', '–û–ö–≠ 2', '–û–ö–≠ 3', '–û–õ–°–∏–¢'],
                '–°–ü–ë': ['–û–ö–≠ 4', '–û–ö–≠ 5', '–û–õ–°–∏–¢'],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': ['–û–ö–≠ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–û–õ–°–∏–¢'],
                '–°–æ—á–∏': ['–û–ö–≠ –°–æ—á–∏', '–û–õ–°–∏–¢']
            }
            self.positions = ['–ë–ü', '–ë–ü BS', '–°–ë–≠', '–ò–ü–ë']
    
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –¥–ª—è Express.ms API"""
        if not self.session:
            self.session = aiohttp.ClientSession(
                headers={
                    'Authorization': f'Bearer {self.secret_key}',
                    'Content-Type': 'application/json',
                    'User-Agent': 'ExpressBot/1.0'
                },
                timeout=aiohttp.ClientTimeout(total=30)
            )
    
    async def send_message_to_express(self, user_id: str, text: str, keyboard: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Express.ms API"""
        try:
            await self.create_session()
            
            message_data = {
                "user_id": user_id,
                "text": text,
                "parse_mode": "Markdown"
            }
            
            if keyboard:
                message_data["keyboard"] = keyboard
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            send_endpoints = [
                f"{self.express_api_url}/v1/bots/{self.bot_id}/send",
                f"{self.express_api_url}/v1/messages/send",
                f"https://express.ms/api/v1/bots/{self.bot_id}/send"
            ]
            
            for endpoint in send_endpoints:
                try:
                    async with self.session.post(endpoint, json=message_data) as response:
                        if response.status in [200, 201]:
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            self.stats['total_messages'] += 1
                            return True
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {endpoint}: {response.status}")
                except Exception as e:
                    logger.warning(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ {endpoint}: {e}")
                    continue
            
            # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
            logger.info(f"üìù Fallback: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {text}")
            self.stats['total_messages'] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def create_keyboard(self, buttons_data: List[List[Dict]]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Express.ms"""
        return {
            "inline_keyboard": buttons_data
        }
    
    def create_start_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
        return self.create_keyboard([
            [
                {"text": "üèôÔ∏è –ú–æ—Å–∫–≤–∞", "callback_data": "location_–ú–°–ö"},
                {"text": "üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "callback_data": "location_–°–ü–ë"}
            ],
            [
                {"text": "üèûÔ∏è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "callback_data": "location_–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"},
                {"text": "üèñÔ∏è –°–æ—á–∏", "callback_data": "location_–°–æ—á–∏"}
            ]
        ])
    
    def create_oke_keyboard(self, location: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
        oke_list = self.oke_by_location.get(location, ['–û–õ–°–∏–¢'])
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –û–ö–≠ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(oke_list), 2):
            row = []
            for j in range(2):
                if i + j < len(oke_list):
                    oke = oke_list[i + j]
                    row.append({"text": oke, "callback_data": f"oke_{oke}"})
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_start"}])
        
        return self.create_keyboard(buttons)
    
    def create_calendar_keyboard(self, year: int = None, month: int = None) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        if year is None:
            year = datetime.now().year
        if month is None:
            month = datetime.now().month
            
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        buttons = []
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        buttons.append([
            {"text": "‚¨ÖÔ∏è", "callback_data": f"nav_month_{year}_{month-1 if month > 1 else 12}_{year-1 if month == 1 else year}"},
            {"text": f"{month_names[month-1]} {year}", "callback_data": "ignore"},
            {"text": "‚û°Ô∏è", "callback_data": f"nav_month_{year}_{month+1 if month < 12 else 1}_{year+1 if month == 12 else year}"}
        ])
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        buttons.append([
            {"text": "–ü–Ω", "callback_data": "ignore"},
            {"text": "–í—Ç", "callback_data": "ignore"},
            {"text": "–°—Ä", "callback_data": "ignore"},
            {"text": "–ß—Ç", "callback_data": "ignore"},
            {"text": "–ü—Ç", "callback_data": "ignore"},
            {"text": "–°–±", "callback_data": "ignore"},
            {"text": "–í—Å", "callback_data": "ignore"}
        ])
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        first_day = datetime(year, month, 1)
        last_day = (first_day + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        days_in_month = last_day.day
        first_weekday = first_day.weekday()
        
        current_date = first_day
        row = []
        
        # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
        for _ in range(first_weekday):
            row.append({"text": " ", "callback_data": "ignore"})
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        for day in range(1, days_in_month + 1):
            current_date = datetime(year, month, day)
            today = datetime.now()
            
            date_str = f"{day:02d}.{month:02d}.{year}"
            
            if current_date.date() == today.date():
                button_text = f"‚úàÔ∏è {day}"
            else:
                button_text = str(day)
            
            callback_data = f"date_{date_str}" if current_date.date() >= today.date() else "ignore"
            
            row.append({"text": button_text, "callback_data": callback_data})
            
            if len(row) == 7:
                buttons.append(row)
                row = []
        
        if row:
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_start"}])
        
        return self.create_keyboard(buttons)
    
    def create_position_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        buttons = []
        
        for position in self.positions:
            buttons.append([{"text": position, "callback_data": f"position_{position}"}])
        
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "callback_data": "back_to_date_selection"}])
        
        return self.create_keyboard(buttons)
    
    def create_direction_keyboard(self, location: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        directions_list = self.directions.get(location, [])
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(directions_list), 2):
            row = []
            for j in range(2):
                if i + j < len(directions_list):
                    direction = directions_list[i + j]
                    row.append({"text": direction, "callback_data": f"direction_{direction}"})
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        buttons.append([{"text": "‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "callback_data": "manual_direction_input"}])
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "callback_data": "back_to_date_selection"}])
        
        return self.create_keyboard(buttons)
    
    def create_confirmation_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        return self.create_keyboard([
            [
                {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": "confirm_application"},
                {"text": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "callback_data": "back_to_start"}
            ]
        ])
    
    async def handle_webhook(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Express.ms"""
        try:
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(data, ensure_ascii=False)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = data.get('type', 'unknown')
            user_id = data.get('user_id', data.get('from', {}).get('id', 'unknown'))
            
            if event_type == 'message':
                text = data.get('text', data.get('message', {}).get('text', ''))
                await self.handle_message(user_id, text)
                
            elif event_type == 'command':
                command = data.get('command', '')
                await self.handle_command(user_id, command)
                
            elif event_type == 'callback_query':
                callback_data = data.get('callback_query', {}).get('data', '')
                await self.handle_callback_query(user_id, callback_data)
            
            return {"status": "ok", "message": "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ"}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return {"status": "error", "message": str(e)}
    
    async def handle_message(self, user_id: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if text.startswith('/'):
            await self.handle_command(user_id, text)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if user_id in self.user_sessions:
                session = self.user_sessions[user_id]
                step = session['step']
                
                if step == 'fio':
                    await self.handle_fio_input(user_id, text)
                elif step == 'manual_direction':
                    await self.handle_manual_direction_input(user_id, text)
                elif step == 'wishes':
                    await self.handle_wishes_input(user_id, text)
            else:
                await self.send_start_message(user_id)
    
    async def handle_command(self, user_id: str, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        if command == '/start':
            await self.send_start_message(user_id)
        elif command == '/help':
            await self.send_help_message(user_id)
        else:
            await self.send_start_message(user_id)
    
    async def handle_callback_query(self, user_id: str, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
        
        if callback_data == "back_to_start":
            await self.send_start_message(user_id)
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
        
        elif callback_data.startswith("location_"):
            await self.handle_location_selection(user_id, callback_data)
        
        elif callback_data.startswith("oke_"):
            await self.handle_oke_selection(user_id, callback_data)
        
        elif callback_data.startswith("nav_month_"):
            await self.handle_calendar_navigation(user_id, callback_data)
        
        elif callback_data.startswith("date_"):
            await self.handle_date_selection(user_id, callback_data)
        
        elif callback_data.startswith("position_"):
            await self.handle_position_selection(user_id, callback_data)
        
        elif callback_data.startswith("direction_"):
            await self.handle_direction_selection(user_id, callback_data)
        
        elif callback_data == "manual_direction_input":
            await self.handle_manual_direction_request(user_id)
        
        elif callback_data == "confirm_application":
            await self.handle_confirm_application(user_id)
        
        elif callback_data == "back_to_date_selection":
            await self.handle_back_to_date_selection(user_id)
    
    async def send_start_message(self, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        periods = await self.get_application_periods()
        
        welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–π—Å–∞.

–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:

**–õ–∏–º–∏—Ç:** –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ—Å—è—Ü –Ω–∞ —Ä–µ–π—Å/—ç—Å—Ç–∞—Ñ–µ—Ç—É.

**–°—Ä–æ–∫–∏:** –° 20-–≥–æ –ø–æ 5-–µ —á–∏—Å–ª–æ (–≤–∫–ª.) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.

**–£—Å–ª–æ–≤–∏—è –ß–ö–≠:** 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞.
_–í–Ω–∏–º–∞–Ω–∏–µ: –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π._

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
‚Ä¢ –ù–∞–∑–µ–º–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞–∂–Ω–µ–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.
‚Ä¢ –ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ –∑–∞—è–≤–æ–∫ ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–º, —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ —Ä–µ–π—Å–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –Ω–µ—Ç –æ—Ç–ø—É—Å–∫–∞ –≤ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.

–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–∏–∂–µ: üëá"""
        
        if not periods:
            welcome_text += "\n\nüö´ **–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã.**"
            welcome_text += "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        keyboard = self.create_start_keyboard()
        await self.send_message_to_express(user_id, welcome_text, keyboard)
    
    async def send_help_message(self, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
2. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–π—Å–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
4. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
5. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
6. –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –°—Ä–æ–∫–∏: —Å 20-–≥–æ –ø–æ 5-–µ —á–∏—Å–ª–æ
‚Ä¢ 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ß–ö–≠

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"""
        
        await self.send_message_to_express(user_id, help_text)
    
    async def get_application_periods(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base_url}/api/public/application-periods") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('periods', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
        return []
    
    async def submit_application(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–π—Å"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_base_url}/api/application", json=user_data) as response:
                    if response.status == 200:
                        self.stats['total_applications'] += 1
                        return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"}
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (handle_location_selection, handle_oke_selection, –∏ —Ç.–¥.)
    # ... (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ express_bot_fixed.py)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = ExpressMSBotWithAdmin()

# HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def webhook_handler(request: Request) -> Response:
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤"""
    try:
        data = await request.json()
        result = await bot.handle_webhook(data)
        return web.json_response(result)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.json_response({"status": "error", "message": str(e)}, status=500)

async def health_handler(request: Request) -> Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    return web.json_response({
        "status": "ok",
        "service": "Express Bot with Admin",
        "bot_id": bot.bot_id,
        "timestamp": datetime.now().isoformat(),
        "stats": bot.stats
    })

async def manifest_handler(request: Request) -> Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±–æ—Ç–∞"""
    manifest = {
        "name": bot.bot_name,
        "version": "1.0.0",
        "description": bot.bot_description,
        "icon": "‚úàÔ∏è",
        "color": "#0088cc",
        "author": "Express Bot Team",
        "bot_id": bot.bot_id,
        "webhook_url": bot.webhook_url,
        "commands": [
            {"command": "/start", "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
            {"command": "/help", "description": "–°–ø—Ä–∞–≤–∫–∞"}
        ]
    }
    return web.json_response(manifest)

# –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
async def admin_panel_handler(request: Request) -> Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    admin_html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Express Bot Admin Panel</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-card { background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }
        .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }
        .stat-label { color: #666; margin-top: 5px; }
        .section { margin-bottom: 30px; }
        .section h3 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
        .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #0056b3; }
        .btn-success { background: #28a745; }
        .btn-danger { background: #dc3545; }
        .btn-warning { background: #ffc107; color: #333; }
        .log-container { background: #f8f9fa; padding: 15px; border-radius: 4px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; }
        .status-online { color: #28a745; font-weight: bold; }
        .status-offline { color: #dc3545; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Express Bot Admin Panel</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã</p>
        </div>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="total-messages">0</div>
                <div class="stat-label">–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="total-applications">0</div>
                <div class="stat-label">–ó–∞—è–≤–æ–∫ –ø–æ–¥–∞–Ω–æ</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="active-users">0</div>
                <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="uptime">0</div>
                <div class="stat-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–º–∏–Ω)</div>
            </div>
        </div>
        
        <div class="section">
            <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
            <p>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: <span id="bot-status" class="status-online">üü¢ –û–Ω–ª–∞–π–Ω</span></p>
            <p>Bot ID: <code>""" + bot.bot_id + """</code></p>
            <p>Webhook URL: <code>""" + bot.webhook_url + """</code></p>
            <p>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: <span id="start-time">""" + bot.stats['start_time'] + """</span></p>
        </div>
        
        <div class="section">
            <h3>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</h3>
            <button class="btn btn-success" onclick="restartBot()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</button>
            <button class="btn btn-warning" onclick="clearSessions()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏</button>
            <button class="btn" onclick="refreshStats()">üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
        </div>
        
        <div class="section">
            <h3>üìù –õ–æ–≥–∏ –±–æ—Ç–∞</h3>
            <div class="log-container" id="logs">
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
            </div>
            <button class="btn" onclick="refreshLogs()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏</button>
        </div>
        
        <div class="section">
            <h3>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
            <button class="btn" onclick="testWebhook()">üì° –¢–µ—Å—Ç webhook</button>
            <button class="btn" onclick="testHealth()">‚ù§Ô∏è –¢–µ—Å—Ç health check</button>
            <button class="btn" onclick="testManifest()">üìã –¢–µ—Å—Ç manifest</button>
        </div>
    </div>
    
    <script>
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async function refreshStats() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                document.getElementById('total-messages').textContent = data.total_messages || 0;
                document.getElementById('total-applications').textContent = data.total_applications || 0;
                document.getElementById('active-users').textContent = data.active_users || 0;
                
                const startTime = new Date(data.start_time);
                const now = new Date();
                const uptime = Math.floor((now - startTime) / 60000);
                document.getElementById('uptime').textContent = uptime;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        async function refreshLogs() {
            try {
                const response = await fetch('/api/logs');
                const logs = await response.text();
                document.getElementById('logs').innerHTML = logs.replace(/\\n/g, '<br>');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
                document.getElementById('logs').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤';
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        async function testWebhook() {
            const testData = {
                type: 'message',
                user_id: 'test_admin',
                text: '/start'
            };
            
            try {
                const response = await fetch('/webhook', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(testData)
                });
                const result = await response.json();
                alert('Webhook —Ç–µ—Å—Ç: ' + JSON.stringify(result));
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ webhook —Ç–µ—Å—Ç–∞: ' + error.message);
            }
        }
        
        async function testHealth() {
            try {
                const response = await fetch('/health');
                const data = await response.json();
                alert('Health check: ' + JSON.stringify(data));
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ health check: ' + error.message);
            }
        }
        
        async function testManifest() {
            try {
                const response = await fetch('/manifest');
                const data = await response.json();
                alert('Manifest: ' + JSON.stringify(data));
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ manifest: ' + error.message);
            }
        }
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
        async function restartBot() {
            if (confirm('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?')) {
                try {
                    const response = await fetch('/api/restart', { method: 'POST' });
                    const result = await response.json();
                    alert('–†–µ–∑—É–ª—å—Ç–∞—Ç: ' + JSON.stringify(result));
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ' + error.message);
                }
            }
        }
        
        async function clearSessions() {
            if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?')) {
                try {
                    const response = await fetch('/api/clear-sessions', { method: 'POST' });
                    const result = await response.json();
                    alert('–†–µ–∑—É–ª—å—Ç–∞—Ç: ' + JSON.stringify(result));
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: ' + error.message);
                }
            }
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(refreshStats, 30000);
        setInterval(refreshLogs, 30000);
        
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        refreshStats();
        refreshLogs();
    </script>
</body>
</html>
    """
    return web.Response(text=admin_html, content_type='text/html')

# API –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def api_stats_handler(request: Request) -> Response:
    """API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    return web.json_response(bot.stats)

async def api_logs_handler(request: Request) -> Response:
    """API: –õ–æ–≥–∏ –±–æ—Ç–∞"""
    try:
        with open('/root/test/express_bot/fixed_bot.log', 'r', encoding='utf-8') as f:
            logs = f.read()
        return web.Response(text=logs[-5000:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤
    except Exception as e:
        return web.Response(text=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

async def api_restart_handler(request: Request) -> Response:
    """API: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    return web.json_response({"status": "ok", "message": "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω"})

async def api_clear_sessions_handler(request: Request) -> Response:
    """API: –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π"""
    bot.user_sessions.clear()
    return web.json_response({"status": "ok", "message": "–°–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã"})

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
    @web.middleware
    async def cors_handler(request, handler):
        response = await handler(request)
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
        return response
    
    app.middlewares.append(cors_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post('/webhook', webhook_handler)
    app.router.add_get('/health', health_handler)
    app.router.add_get('/manifest', manifest_handler)
    app.router.add_get('/', health_handler)
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    app.router.add_get('/admin', admin_panel_handler)
    
    # API –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    app.router.add_get('/api/stats', api_stats_handler)
    app.router.add_get('/api/logs', api_logs_handler)
    app.router.add_post('/api/restart', api_restart_handler)
    app.router.add_post('/api/clear-sessions', api_clear_sessions_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '0.0.0.0', 5010)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Express Bot with Admin...")
    logger.info(f"üì± Bot ID: {bot.bot_id}")
    logger.info(f"üîó Webhook URL: {bot.webhook_url}")
    logger.info(f"üåê Server: http://0.0.0.0:5010")
    logger.info(f"üë®‚Äçüíº Admin Panel: http://localhost:5010/admin")
    
    await site.start()
    
    try:
        await asyncio.Future()  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        await bot.close()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
