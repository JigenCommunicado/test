#!/bin/bash

echo "üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Express.ms Bot"
echo "===================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo $0"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <domain>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 bot.yourcompany.com"
    exit 1
fi

DOMAIN=$1

echo "üåê –î–æ–º–µ–Ω: $DOMAIN"
echo ""

# –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p /opt/express/bots/storages
mkdir -p /opt/express/bots/production
mkdir -p /opt/express/bots/production/{logs,data,ssl,backups}
echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

# –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
echo ""
echo "üóÑÔ∏è –®–ê–ì 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞..."
cd /opt/express/bots/storages

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
cp /root/test/express_bot/docker-compose.storages.yml .

# –°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
POSTGRES_PASSWORD=$(openssl rand -hex 32)
cat > .env << EOF
POSTGRES_USER=postgres
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
EOF

echo "üîë –ü–∞—Ä–æ–ª—å PostgreSQL: $POSTGRES_PASSWORD"

# –ó–∞–ø—É—Å–∫ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
echo "üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –∏ Redis..."
docker-compose -f docker-compose.storages.yml up -d
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üìä –°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:"
docker-compose -f docker-compose.storages.yml ps

# –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞
echo ""
echo "üóÑÔ∏è –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞..."
BOT_DB_PASSWORD=$(openssl rand -hex 32)
SECRET_KEY=$(openssl rand -hex 32)

echo "üîë –ü–∞—Ä–æ–ª—å –ë–î –±–æ—Ç–∞: $BOT_DB_PASSWORD"
echo "üîë Secret Key: $SECRET_KEY"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–î
docker exec storages-postgres-1 psql -U postgres -c "CREATE USER express_bot_user;"
docker exec storages-postgres-1 psql -U postgres -c "ALTER USER express_bot_user WITH PASSWORD '$BOT_DB_PASSWORD';"
docker exec storages-postgres-1 psql -U postgres -c "CREATE DATABASE express_bot_db WITH OWNER express_bot_user;"

# –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production –±–æ—Ç–∞
echo ""
echo "ü§ñ –®–ê–ì 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production –±–æ—Ç–∞..."
cd /opt/express/bots/production

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
cp /root/test/express_bot/docker-compose.prod.yml docker-compose.yml
cp /root/test/express_bot/Dockerfile.prod Dockerfile
cp /root/test/express_bot/requirements.txt .
cp /root/test/express_bot/express_bot_docker.py .
cp /root/test/express_bot/init.sql .
cp /root/test/express_bot/nginx.conf .
cp /root/test/express_bot/postgresql.conf .
cp /root/test/express_bot/redis.conf .
cp /root/test/express_bot/env.prod .env

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
sed -i "s/your_secure_postgres_password_here/$BOT_DB_PASSWORD/g" .env
sed -i "s/your-domain.com/$DOMAIN/g" .env
sed -i "s/your_secret_key_for_jwt_here/$SECRET_KEY/g" .env

echo "‚úÖ Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
echo ""
echo "üîê –®–ê–ì 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
mkdir -p ssl

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
openssl genrsa -out ssl/key.pem 2048
openssl req -new -x509 -key ssl/key.pem -out ssl/cert.pem -days 365 \
    -subj "/C=RU/ST=Moscow/L=Moscow/O=Express.ms Bot/OU=IT Department/CN=$DOMAIN"
chmod 600 ssl/key.pem
chmod 644 ssl/cert.pem

echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω"

# –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
echo ""
echo "üöÄ –®–ê–ì 6: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
docker-compose up --build -d
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:"
docker-compose ps

# –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
echo ""
echo "üè• –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health check..."
HEALTH_RESPONSE=$(curl -s -k https://$DOMAIN/health 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ Health check: OK"
    echo "$HEALTH_RESPONSE" | head -3
else
    echo "‚ùå Health check: FAIL"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook..."
WEBHOOK_RESPONSE=$(curl -s -k -X POST https://$DOMAIN/webhook \
    -H "Content-Type: application/json" \
    -d '{"type": "message", "user_id": "test", "text": "/start"}' 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ Webhook: OK"
    echo "$WEBHOOK_RESPONSE" | head -3
else
    echo "‚ùå Webhook: FAIL"
fi

echo ""
echo "üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
echo "======================"
echo ""
echo "üåê –í–∞—à–∏ URL:"
echo "   - HTTP: http://$DOMAIN"
echo "   - HTTPS: https://$DOMAIN"
echo "   - Health: https://$DOMAIN/health"
echo "   - Webhook: https://$DOMAIN/webhook"
echo "   - Admin: https://$DOMAIN/admin"
echo ""
echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "   - –°—Ç–∞—Ç—É—Å: cd /opt/express/bots/production && docker-compose ps"
echo "   - –õ–æ–≥–∏: cd /opt/express/bots/production && docker-compose logs -f"
echo "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: cd /opt/express/bots/production && docker-compose down"
echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: cd /opt/express/bots/production && docker-compose restart"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü–æ–ª—É—á–∏—Ç–µ BOT_CREDENTIALS –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Express.ms"
echo "2. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª: nano /opt/express/bots/production/.env"
echo "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: cd /opt/express/bots/production && docker-compose restart"
echo "4. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ webhook –≤ Express.ms: https://$DOMAIN/webhook"
echo ""
echo "üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
