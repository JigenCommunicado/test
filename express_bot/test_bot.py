#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Express –±–æ—Ç–∞
"""

import asyncio
import aiohttp
import json
import time

async def test_bot():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Express Bot...")
    
    # URL –±–æ—Ç–∞
    base_url = "http://localhost:5008"
    webhook_url = f"{base_url}/webhook"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_webhooks = [
        {
            "type": "message",
            "user_id": "test_user_123",
            "text": "/start"
        },
        {
            "type": "callback_query",
            "user_id": "test_user_123",
            "callback_query": {
                "data": "location_–ú–°–ö"
            }
        },
        {
            "type": "callback_query",
            "user_id": "test_user_123",
            "callback_query": {
                "data": "oke_–û–ö–≠ 1"
            }
        },
        {
            "type": "callback_query",
            "user_id": "test_user_123", 
            "callback_query": {
                "data": "date_15.09.2025"
            }
        }
    ]
    
    async with aiohttp.ClientSession() as session:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º health check...")
        try:
            async with session.get(f"{base_url}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Health check OK: {data}")
        else:
                    print(f"‚ùå Health check failed: {response.status}")
        except Exception as e:
            print(f"‚ùå Health check error: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º manifest
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º manifest...")
        try:
            async with session.get(f"{base_url}/manifest") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Manifest OK: {json.dumps(data, ensure_ascii=False, indent=2)}")
        else:
                    print(f"‚ùå Manifest failed: {response.status}")
        except Exception as e:
            print(f"‚ùå Manifest error: {e}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook'–∏
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook'–∏...")
        for i, webhook_data in enumerate(test_webhooks, 1):
            print(f"\n   –¢–µ—Å—Ç {i}: {webhook_data['type']}")
            try:
                async with session.post(webhook_url, json=webhook_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        print(f"   ‚úÖ Webhook {i} OK: {result}")
                else:
                        error_text = await response.text()
                        print(f"   ‚ùå Webhook {i} failed: {response.status} - {error_text}")
            except Exception as e:
                print(f"   ‚ùå Webhook {i} error: {e}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Express Bot...")
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (5 —Å–µ–∫)...")
    await asyncio.sleep(5)
    
    await test_bot()

if __name__ == "__main__":
    asyncio.run(main())