#!/bin/bash

echo "üöÄ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Express.ms Bot"
echo "================================="
echo "–°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Express.ms"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo $0"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <domain> [email]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 bot.yourcompany.com admin@yourcompany.com"
    exit 1
fi

DOMAIN=$1
EMAIL=${2:-admin@$DOMAIN}

echo "üåê –î–æ–º–µ–Ω: $DOMAIN"
echo "üìß Email: $EMAIL"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—É–∑—ã
pause() {
    echo ""
    read -p "‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
check_success() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –≤ $1"
        exit 1
    fi
}

echo "üìã –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´"
echo "=========================="
echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    systemctl enable docker
    systemctl start docker
    check_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
else
    echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    check_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose"
else
    echo "‚úÖ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
apt update -qq
apt install -y curl wget jq openssl ufw certbot
check_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"

pause

echo "üìã –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –î–ò–†–ï–ö–¢–û–†–ò–ô"
echo "======================================"
echo "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Express.ms..."

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p /opt/express/bots/storages
mkdir -p /opt/express/bots/production
mkdir -p /opt/express/bots/production/logs
mkdir -p /opt/express/bots/production/data
mkdir -p /opt/express/bots/production/ssl
mkdir -p /opt/express/bots/production/backups

echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
echo "   - /opt/express/bots/storages (–æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)"
echo "   - /opt/express/bots/production (production –±–æ—Ç)"

pause

echo "üìã –®–ê–ì 3: –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–©–ï–ì–û –•–†–ê–ù–ò–õ–ò–©–ê"
echo "==================================="
echo "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PostgreSQL –∏ Redis..."

cd /opt/express/bots/storages

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
cp /root/test/express_bot/docker-compose.storages.yml .

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
POSTGRES_PASSWORD=$(openssl rand -hex 32)
echo "POSTGRES_USER=postgres" > .env
echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env

echo "üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å PostgreSQL: $POSTGRES_PASSWORD"

# –ó–∞–ø—É—Å–∫ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
echo "üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –∏ Redis..."
docker-compose -f docker-compose.storages.yml up -d
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
docker-compose -f docker-compose.storages.yml ps
check_success "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"

pause

echo "üìã –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–õ–Ø –ë–û–¢–ê"
echo "======================================"
echo "–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ—Ç–∞..."

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –±–æ—Ç–∞
BOT_DB_PASSWORD=$(openssl rand -hex 32)
SECRET_KEY=$(openssl rand -hex 32)
JWT_SECRET=$(openssl rand -hex 32)

echo "üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–æ–ª–∏:"
echo "   - PostgreSQL: $BOT_DB_PASSWORD"
echo "   - Secret Key: $SECRET_KEY"
echo "   - JWT Secret: $JWT_SECRET"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–î
docker exec storages-postgres-1 psql -U postgres -c "CREATE USER express_bot_user;"
docker exec storages-postgres-1 psql -U postgres -c "ALTER USER express_bot_user WITH PASSWORD '$BOT_DB_PASSWORD';"
docker exec storages-postgres-1 psql -U postgres -c "CREATE DATABASE express_bot_db WITH OWNER express_bot_user;"

check_success "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

pause

echo "üìã –®–ê–ì 5: –ù–ê–°–¢–†–û–ô–ö–ê PRODUCTION –ë–û–¢–ê"
echo "=================================="
echo "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞..."

cd /opt/express/bots/production

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
cp /root/test/express_bot/docker-compose.prod.yml docker-compose.yml
cp /root/test/express_bot/Dockerfile.prod Dockerfile
cp /root/test/express_bot/requirements.txt .
cp /root/test/express_bot/express_bot_docker.py .
cp /root/test/express_bot/init.sql .
cp /root/test/express_bot/nginx.conf .
cp /root/test/express_bot/postgresql.conf .
cp /root/test/express_bot/redis.conf .
cp /root/test/express_bot/env.prod .env

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
sed -i "s/your_secure_postgres_password_here/$BOT_DB_PASSWORD/g" .env
sed -i "s/your_secret_key_for_jwt_here/$SECRET_KEY/g" .env
sed -i "s/your_jwt_secret_here/$JWT_SECRET/g" .env
sed -i "s/your-domain.com/$DOMAIN/g" .env

echo "‚úÖ Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

pause

echo "üìã –®–ê–ì 6: –ù–ê–°–¢–†–û–ô–ö–ê SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê"
echo "=================================="
echo "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç..."

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ SSL
echo "üîê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:"
echo "1) Let's Encrypt (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
echo "2) –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): " SSL_CHOICE

case $SSL_CHOICE in
    1)
        echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Let's Encrypt SSL..."
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        systemctl stop nginx 2>/dev/null || true
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        certbot certonly --standalone \
            --non-interactive \
            --agree-tos \
            --email "$EMAIL" \
            --domains "$DOMAIN"
        
        if [ $? -eq 0 ]; then
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            cp "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ssl/cert.pem
            cp "/etc/letsencrypt/live/$DOMAIN/privkey.pem" ssl/key.pem
            chmod 644 ssl/cert.pem
            chmod 600 ssl/key.pem
            echo "‚úÖ Let's Encrypt SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
            echo "üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É..."
            SSL_CHOICE=2
        fi
        ;;
    2)
        echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL..."
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        openssl genrsa -out ssl/key.pem 2048
        openssl req -new -x509 -key ssl/key.pem -out ssl/cert.pem -days 365 \
            -subj "/C=RU/ST=Moscow/L=Moscow/O=Express.ms Bot/OU=IT Department/CN=$DOMAIN"
        chmod 600 ssl/key.pem
        chmod 644 ssl/cert.pem
        echo "‚úÖ –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        ;;
esac

pause

echo "üìã –®–ê–ì 7: –ù–ê–°–¢–†–û–ô–ö–ê FIREWALL"
echo "============================"
echo "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º firewall..."

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ufw
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow 22/tcp comment 'SSH'
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'
ufw deny 5432/tcp comment 'PostgreSQL (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)'
ufw deny 6379/tcp comment 'Redis (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)'
ufw deny 8000/tcp comment 'Bot Server (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)'
ufw logging on
ufw --force enable

echo "‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

pause

echo "üìã –®–ê–ì 8: –°–û–ó–î–ê–ù–ò–ï SYSTEMD –°–ï–†–í–ò–°–ê"
echo "=================================="
echo "–°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
cat > /etc/systemd/system/express-bot.service << EOF
[Unit]
Description=Express.ms Bot Production
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/express/bots/production
ExecStart=/usr/local/bin/docker-compose up -d
ExecStop=/usr/local/bin/docker-compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable express-bot

echo "‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"

pause

echo "üìã –®–ê–ì 9: –ó–ê–ü–£–°–ö –ë–û–¢–ê"
echo "===================="
echo "–ó–∞–ø—É—Å–∫–∞–µ–º Express.ms Bot..."

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
docker-compose up --build -d
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
docker-compose ps
check_success "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"

pause

echo "üìã –®–ê–ì 10: –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò"
echo "===================================="
echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health check..."
HEALTH_RESPONSE=$(curl -s -k https://$DOMAIN/health 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ Health check: OK"
    echo "$HEALTH_RESPONSE" | jq . 2>/dev/null || echo "$HEALTH_RESPONSE"
else
    echo "‚ùå Health check: FAIL"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook..."
WEBHOOK_RESPONSE=$(curl -s -k -X POST https://$DOMAIN/webhook \
    -H "Content-Type: application/json" \
    -d '{"type": "message", "user_id": "test", "text": "/start"}' 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ Webhook: OK"
    echo "$WEBHOOK_RESPONSE" | jq . 2>/dev/null || echo "$WEBHOOK_RESPONSE"
else
    echo "‚ùå Webhook: FAIL"
fi

pause

echo "üìã –®–ê–ì 11: –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê"
echo "==============================="
echo "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ..."

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
cat > monitor.sh << 'EOF'
#!/bin/bash
echo "üìä Express.ms Bot Monitor"
echo "========================="
echo "üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker-compose ps
echo ""
echo "üíæ –†–µ—Å—É—Ä—Å—ã:"
docker stats --no-stream
echo ""
echo "üè• Health:"
curl -s -k https://localhost/health | jq . 2>/dev/null || echo "Health check failed"
echo ""
echo "üìà Stats:"
curl -s -k https://localhost/stats | jq . 2>/dev/null || echo "Stats failed"
EOF

chmod +x monitor.sh

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
cat > backup.sh << 'EOF'
#!/bin/bash
BACKUP_DIR="/opt/express/bots/production/backups"
DATE=$(date +%Y%m%d_%H%M%S)

echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
docker exec express-bot-postgres-prod pg_dump -U express_bot_user express_bot_db > "$BACKUP_DIR/db_backup_$DATE.sql"

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Redis
docker exec express-bot-redis-prod redis-cli --rdb "$BACKUP_DIR/redis_backup_$DATE.rdb"

# –°–∂–∞—Ç–∏–µ
cd "$BACKUP_DIR"
tar -czf "backup_$DATE.tar.gz" "db_backup_$DATE.sql" "redis_backup_$DATE.rdb"
rm "db_backup_$DATE.sql" "redis_backup_$DATE.rdb"

echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: backup_$DATE.tar.gz"

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π
find "$BACKUP_DIR" -name "backup_*.tar.gz" -mtime +30 -delete
EOF

chmod +x backup.sh

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
(crontab -l 2>/dev/null; echo "0 2 * * * /opt/express/bots/production/backup.sh") | crontab -

echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

pause

echo "üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
echo "======================"
echo ""
echo "‚úÖ Express.ms Bot —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
echo ""
echo "üåê –í–∞—à–∏ URL:"
echo "   - HTTP: http://$DOMAIN"
echo "   - HTTPS: https://$DOMAIN"
echo "   - Health: https://$DOMAIN/health"
echo "   - Webhook: https://$DOMAIN/webhook"
echo "   - Admin: https://$DOMAIN/admin"
echo ""
echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "   - –°—Ç–∞—Ç—É—Å: systemctl status express-bot"
echo "   - –ó–∞–ø—É—Å–∫: systemctl start express-bot"
echo "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: systemctl stop express-bot"
echo "   - –õ–æ–≥–∏: journalctl -u express-bot -f"
echo "   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ./monitor.sh"
echo "   - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: ./backup.sh"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü–æ–ª—É—á–∏—Ç–µ BOT_CREDENTIALS –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Express.ms"
echo "2. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ credentials"
echo "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: systemctl restart express-bot"
echo "4. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ webhook –≤ Express.ms: https://$DOMAIN/webhook"
echo "5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
echo ""
echo "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã Express.ms:"
echo "   - Sales: sales@express.ms"
echo "   - Support: support@express.ms"
echo "   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://express.ms/faq/"
echo ""
echo "üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
