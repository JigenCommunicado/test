#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ Express.ms
"""

import asyncio
import json
import logging
import aiohttp
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ExpressMSSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è Express.ms"""
    
    def __init__(self):
        self.bot_id = "00c46d64-1127-5a96-812d-3d8b27c58b99"
        self.secret_key = "a75b4cd97d9e88e543f077178b2d5a4f"
        self.webhook_url = "https://comparing-doom-solving-royalty.trycloudflare.com:5010/webhook"
        self.base_url = "https://comparing-doom-solving-royalty.trycloudflare.com:5010"
        self.session = None
        
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession(
                headers={
                    'Authorization': f'Bearer {self.secret_key}',
                    'Content-Type': 'application/json',
                    'User-Agent': 'ExpressBot/1.0'
                },
                timeout=aiohttp.ClientTimeout(total=30)
            )
    
    async def test_bot_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...")
            
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
                async with session.get(f"{self.base_url}/health") as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"‚úÖ Health check OK: {data}")
                        return True
                    else:
                        logger.error(f"‚ùå Health check failed: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
            return False
    
    async def get_bot_manifest(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –±–æ—Ç–∞...")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/manifest") as response:
                    if response.status == 200:
                        manifest = await response.json()
                        logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω: {json.dumps(manifest, ensure_ascii=False, indent=2)}")
                        return manifest
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {response.status}")
                        return {}
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
            return {}
    
    async def test_webhook(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook"""
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook...")
            
            test_data = {
                "type": "message",
                "user_id": "test_admin_setup",
                "text": "/start"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.webhook_url}", json=test_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"‚úÖ Webhook —Ç–µ—Å—Ç OK: {result}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå Webhook —Ç–µ—Å—Ç failed: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook: {e}")
            return False
    
    def create_express_ms_config(self) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Express.ms"""
        config = {
            "smartapp": {
                "name": "Flight Booking Bot",
                "description": "–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã",
                "version": "1.0.0",
                "icon": "‚úàÔ∏è",
                "color": "#0088cc",
                "author": "Express Bot Team",
                "bot_id": self.bot_id,
                "webhook_url": self.webhook_url,
                "base_url": self.base_url,
                "manifest_url": f"{self.base_url}/manifest",
                "admin_url": f"{self.base_url}/admin",
                "permissions": [
                    "read_messages",
                    "send_messages",
                    "read_user_info",
                    "access_files"
                ],
                "commands": [
                    {
                        "command": "/start",
                        "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
                    },
                    {
                        "command": "/help",
                        "description": "–°–ø—Ä–∞–≤–∫–∞"
                    },
                    {
                        "command": "/new",
                        "description": "–ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–π—Å"
                    }
                ],
                "endpoints": {
                    "webhook": "/webhook",
                    "health": "/health",
                    "manifest": "/manifest",
                    "admin": "/admin"
                }
            },
            "express_ms_settings": {
                "bot_id": self.bot_id,
                "secret_key": self.secret_key,
                "webhook_url": self.webhook_url,
                "api_base_url": "https://api.express.ms",
                "registration_required": True,
                "webhook_events": [
                    "message",
                    "command",
                    "callback_query"
                ]
            }
        }
        return config
    
    def save_config(self, config: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('/root/test/express_bot/express_ms_config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ express_ms_config.json")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def create_setup_instructions(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        instructions = f"""
# üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Express Bot –≤ Express.ms

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:
- **Bot ID**: {self.bot_id}
- **Webhook URL**: {self.webhook_url}
- **Base URL**: {self.base_url}
- **Admin Panel**: {self.base_url}/admin

## üîß –®–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Express.ms:

### 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∫–∞–∫ SmartApp
1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Express.ms
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "SmartApps" –∏–ª–∏ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
3. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è:
   - **–ù–∞–∑–≤–∞–Ω–∏–µ**: Flight Booking Bot
   - **–û–ø–∏—Å–∞–Ω–∏–µ**: –ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã
   - **URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**: {self.base_url}
   - **Webhook URL**: {self.webhook_url}
   - **–ò–∫–æ–Ω–∫–∞**: ‚úàÔ∏è
   - **–¶–≤–µ—Ç**: #0088cc

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
1. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:
   - **Webhook URL**: {self.webhook_url}
   - **–°–æ–±—ã—Ç–∏—è**: message, command, callback_query
   - **–ú–µ—Ç–æ–¥**: POST
   - **Content-Type**: application/json

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞:
- ‚úÖ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
- ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
- ‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
- ‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º

### 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–æ–Ω–ª–∞–π–Ω")
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/start` –±–æ—Ç—É
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {self.base_url}/admin

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API:
```bash
# Health check
curl {self.base_url}/health

# Manifest
curl {self.base_url}/manifest

# Webhook test
curl -X POST {self.webhook_url} \\
  -H "Content-Type: application/json" \\
  -d '{{"type": "message", "user_id": "test", "text": "/start"}}'
```

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
- **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**: {self.base_url}/admin
- **–õ–æ–≥–∏**: tail -f /root/test/express_bot/fixed_bot.log
- **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**: {self.base_url}/api/stats

## üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:
1. **–ë–æ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ webhook URL –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
2. **–û—à–∏–±–∫–∏ webhook**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞
3. **–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
- –õ–æ–≥–∏ –±–æ—Ç–∞: /root/test/express_bot/fixed_bot.log
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: /root/test/express_bot/express_ms_config.json
- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {self.base_url}/admin
"""
        return instructions
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Express Bot –¥–ª—è Express.ms...")
    
    setup = ExpressMSSetup()
    
    try:
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        logger.info("\n=== –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===")
        connection_ok = await setup.test_bot_connection()
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        logger.info("\n=== –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ê–ù–ò–§–ï–°–¢–ê ===")
        manifest = await setup.get_bot_manifest()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook
        logger.info("\n=== –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBHOOK ===")
        webhook_ok = await setup.test_webhook()
        
        # 4. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("\n=== –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
        config = setup.create_express_ms_config()
        config_saved = setup.save_config(config)
        
        # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        logger.info("\n=== –≠–¢–ê–ü 5: –°–û–ó–î–ê–ù–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ô ===")
        instructions = setup.create_setup_instructions()
        
        with open('/root/test/express_bot/EXPRESS_MS_SETUP_GUIDE.md', 'w', encoding='utf-8') as f:
            f.write(instructions)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "="*60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò:")
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {'‚úÖ OK' if connection_ok else '‚ùå FAIL'}")
        logger.info(f"üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω: {'‚úÖ OK' if manifest else '‚ùå FAIL'}")
        logger.info(f"üß™ Webhook —Ç–µ—Å—Ç: {'‚úÖ OK' if webhook_ok else '‚ùå FAIL'}")
        logger.info(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {'‚úÖ OK' if config_saved else '‚ùå FAIL'}")
        logger.info("="*60)
        
        logger.info(f"\nüì± Bot ID: {setup.bot_id}")
        logger.info(f"üåê Webhook URL: {setup.webhook_url}")
        logger.info(f"üë®‚Äçüíº Admin Panel: {setup.base_url}/admin")
        logger.info(f"üìã Manifest: {setup.base_url}/manifest")
        
        if connection_ok and webhook_ok:
            logger.info("\nüéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ Express.ms!")
            logger.info("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            logger.info("1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Express.ms")
            logger.info("2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ SmartApp")
            logger.info("3. –£–∫–∞–∂–∏—Ç–µ webhook URL")
            logger.info("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            logger.info(f"\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: EXPRESS_MS_SETUP_GUIDE.md")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            logger.info("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            logger.info("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            logger.info("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
            logger.info("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        await setup.close()

if __name__ == "__main__":
    asyncio.run(main())


