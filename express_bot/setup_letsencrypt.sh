#!/bin/bash

echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Let's Encrypt SSL –¥–ª—è Express.ms Bot"
echo "================================================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo $0"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <domain> [email]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 bot.yourcompany.com admin@yourcompany.com"
    exit 1
fi

DOMAIN=$1
EMAIL=${2:-admin@$DOMAIN}

echo "üåê –î–æ–º–µ–Ω: $DOMAIN"
echo "üìß Email: $EMAIL"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞..."
if ! ping -c 1 "$DOMAIN" > /dev/null 2>&1; then
    echo "‚ùå –î–æ–º–µ–Ω $DOMAIN –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    exit 1
fi

echo "‚úÖ –î–æ–º–µ–Ω $DOMAIN –¥–æ—Å—Ç—É–ø–µ–Ω"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ certbot
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ certbot..."
if ! command -v certbot &> /dev/null; then
    apt update
    apt install -y certbot
    echo "‚úÖ Certbot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    echo "‚úÖ Certbot —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx..."
systemctl stop nginx 2>/dev/null || true
docker-compose stop nginx 2>/dev/null || true

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
echo "üîê –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç Let's Encrypt..."
certbot certonly --standalone \
    --non-interactive \
    --agree-tos \
    --email "$EMAIL" \
    --domains "$DOMAIN"

if [ $? -eq 0 ]; then
    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    exit 1
fi

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
echo "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
mkdir -p ssl
cp "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ssl/cert.pem
cp "/etc/letsencrypt/live/$DOMAIN/privkey.pem" ssl/key.pem
chmod 644 ssl/cert.pem
chmod 600 ssl/key.pem

echo "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ ssl/"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
cat > update_ssl.sh << EOF
#!/bin/bash

echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
certbot renew --quiet

if [ \$? -eq 0 ]; then
    echo "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    cp "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ssl/cert.pem
    cp "/etc/letsencrypt/live/$DOMAIN/privkey.pem" ssl/key.pem
    chmod 644 ssl/cert.pem
    chmod 600 ssl/key.pem
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx
    docker-compose restart nginx
    
    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ nginx –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
fi
EOF

chmod +x update_ssl.sh

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
echo "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
(crontab -l 2>/dev/null; echo "0 3 * * * /opt/express/bots/production/update_ssl.sh") | crontab -

# –°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å Let's Encrypt
echo "üåê –°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å Let's Encrypt..."
cat > nginx-letsencrypt.conf << EOF
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Gzip —Å–∂–∞—Ç–∏–µ
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone \$binary_remote_addr zone=webhook:10m rate=5r/s;
    
    # Upstream –¥–ª—è –±–æ—Ç–∞
    upstream express_bot {
        server express-bot:8000;
        keepalive 32;
    }
    
    # HTTP —Å–µ—Ä–≤–µ—Ä (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS)
    server {
        listen 80;
        server_name $DOMAIN;
        
        # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS
        return 301 https://\$host\$request_uri;
    }
    
    # HTTPS —Å–µ—Ä–≤–µ—Ä
    server {
        listen 443 ssl http2;
        server_name $DOMAIN;
        
        # SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (Let's Encrypt)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Health check endpoint
        location /health {
            proxy_pass http://express_bot;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ health check
            proxy_cache_valid 200 30s;
        }
        
        # Webhook endpoint (—Å rate limiting)
        location /webhook {
            limit_req zone=webhook burst=20 nodelay;
            
            proxy_pass http://express_bot;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            
            # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è webhook
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # API endpoints (—Å rate limiting)
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://express_bot;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        location /static/ {
            alias /app/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        location / {
            proxy_pass http://express_bot;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            
            # –¢–∞–π–º–∞—É—Ç—ã
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        access_log /var/log/nginx/express_bot_access.log main;
        error_log /var/log/nginx/express_bot_error.log;
    }
}
EOF

# –ó–∞–º–µ–Ω–∞ nginx.conf
cp nginx-letsencrypt.conf nginx.conf

echo "‚úÖ Let's Encrypt SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
echo "üåê –î–æ–º–µ–Ω: $DOMAIN"
echo "üìß Email: $EMAIL"
echo "üîê –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ssl/cert.pem"
echo "üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ssl/key.pem"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: docker-compose up -d"
echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL: curl -I https://$DOMAIN/health"
echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –≤ Express.ms: https://$DOMAIN/webhook"
echo ""
echo "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (cron)"
echo "üìã –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ./update_ssl.sh"
