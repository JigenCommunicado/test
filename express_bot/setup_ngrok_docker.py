#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ngrok –¥–ª—è Express Bot –≤ Docker
"""

import subprocess
import time
import json
import re
import os
import requests
import yaml

def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_content = """# Express Bot Environment Variables
BOT_CREDENTIALS=00c46d64-1127-5a96-812d-3d8b27c58b99:a75b4cd97d9e88e543f077178b2d5a4f
HOST=https://api.express.ms
DATABASE_URL=postgresql://express_bot_user:express_bot_password@postgres:5432/express_bot_db
REDIS_URL=redis://redis:6379/0
LOG_LEVEL=INFO
NGROK_URL=
"""
    
    with open('/root/test/express_bot/.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def update_ngrok_config(authtoken=None, subdomain=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ngrok"""
    config = {
        "version": "2",
        "authtoken": authtoken or "# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à ngrok authtoken –∑–¥–µ—Å—å",
        "tunnels": {
            "express-bot": {
                "proto": "http",
                "addr": "express-bot:8000",
                "inspect": True,
                "bind_tls": True,
                "host_header": "express-bot:8000",
                "web_addr": "0.0.0.0:4040"
            }
        }
    }
    
    if subdomain:
        config["tunnels"]["express-bot"]["subdomain"] = subdomain
    
    with open('/root/test/express_bot/ngrok.yml', 'w', encoding='utf-8') as f:
        yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ngrok –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

def start_docker_services():
    """–ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        print("üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        subprocess.run(["docker-compose", "-f", "docker-compose.ngrok.yml", "down"], 
                      cwd="/root/test/express_bot", check=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        result = subprocess.run([
            "docker-compose", "-f", "docker-compose.ngrok.yml", "up", "-d"
        ], cwd="/root/test/express_bot", capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False

def wait_for_services():
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    for i in range(30):
        try:
            response = requests.get("http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤")
                break
        except:
            pass
        time.sleep(2)
    else:
        print("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ngrok
    for i in range(30):
        try:
            response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
            if response.status_code == 200:
                print("‚úÖ ngrok –≥–æ—Ç–æ–≤")
                break
        except:
            pass
        time.sleep(2)
    else:
        print("‚ö†Ô∏è ngrok –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

def get_ngrok_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL ngrok —Ç—É–Ω–Ω–µ–ª—è"""
    try:
        response = requests.get("http://localhost:4040/api/tunnels", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('tunnels'):
                tunnel_url = data['tunnels'][0]['public_url']
                print(f"‚úÖ ngrok —Ç—É–Ω–Ω–µ–ª—å: {tunnel_url}")
                return tunnel_url
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL ngrok: {e}")
    
    return None

def update_bot_config(tunnel_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å ngrok URL"""
    if not tunnel_url:
        return False
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        env_file = '/root/test/express_bot/.env'
        with open(env_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º NGROK_URL
        content = re.sub(r'NGROK_URL=.*', f'NGROK_URL={tunnel_url}', content)
        
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: NGROK_URL={tunnel_url}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def create_docker_instructions(tunnel_url):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è Docker —Å ngrok"""
    if not tunnel_url:
        return
    
    instructions = f"""
# üê≥ Express Bot —Å ngrok –≤ Docker - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:
- **Bot ID**: `00c46d64-1127-5a96-812d-3d8b27c58b99`
- **Webhook URL**: `{tunnel_url}/webhook`
- **Base URL**: `{tunnel_url}`
- **Health Check**: `{tunnel_url}/health`
- **Stats**: `{tunnel_url}/stats`

## üê≥ Docker —Å–µ—Ä–≤–∏—Å—ã:
- **express-bot**: –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (–ø–æ—Ä—Ç 8000)
- **ngrok**: –¢—É–Ω–Ω–µ–ª—å (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:4040)
- **postgres**: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ä—Ç 5432)
- **redis**: –ö—ç—à (–ø–æ—Ä—Ç 6379)

## ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Docker + ngrok:
- üîí –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞
- üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
- üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ngrok: http://localhost:4040
- üîß –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ Express.ms:

### 1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ SmartApp:
1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Express.ms
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "SmartApps"
3. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è:
   - **–ù–∞–∑–≤–∞–Ω–∏–µ**: Express Bot Docker
   - **–û–ø–∏—Å–∞–Ω–∏–µ**: –ë–æ—Ç –¥–ª—è Express.ms –≤ Docker
   - **URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**: `{tunnel_url}`
   - **Webhook URL**: `{tunnel_url}/webhook`
   - **–ò–∫–æ–Ω–∫–∞**: üê≥
   - **–¶–≤–µ—Ç**: #0088cc

### 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook:
- **Webhook URL**: `{tunnel_url}/webhook`
- **–°–æ–±—ã—Ç–∏—è**: message, command, callback_query
- **–ú–µ—Ç–æ–¥**: POST
- **Content-Type**: application/json

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API:
```bash
# Health check
curl {tunnel_url}/health

# Manifest
curl {tunnel_url}/manifest

# Stats
curl {tunnel_url}/stats

# Webhook test
curl -X POST {tunnel_url}/webhook \\
  -H "Content-Type: application/json" \\
  -d '{{"type": "message", "user_id": "test", "text": "/start"}}'
```

## üê≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker —Å–µ—Ä–≤–∏—Å–∞–º–∏:
```bash
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
docker-compose -f docker-compose.ngrok.yml up -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
docker-compose -f docker-compose.ngrok.yml down

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
docker-compose -f docker-compose.ngrok.yml logs -f

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
docker-compose -f docker-compose.ngrok.yml logs -f express-bot
docker-compose -f docker-compose.ngrok.yml logs -f ngrok

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
docker-compose -f docker-compose.ngrok.yml restart express-bot
```

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
- **ngrok –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å**: http://localhost:4040
- **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**: `{tunnel_url}/stats`
- **Health check**: `{tunnel_url}/health`
- **–õ–æ–≥–∏ –±–æ—Ç–∞**: `docker-compose -f docker-compose.ngrok.yml logs express-bot`
- **–õ–æ–≥–∏ ngrok**: `docker-compose -f docker-compose.ngrok.yml logs ngrok`

## üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:
1. **–ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ `docker-compose logs express-bot`
2. **ngrok –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ `docker-compose logs ngrok`
3. **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ `docker-compose logs postgres`
4. **Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ `docker-compose logs redis`

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
- –õ–æ–≥–∏ –±–æ—Ç–∞: `docker-compose -f docker-compose.ngrok.yml logs express-bot`
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: `docker-compose.ngrok.yml`
- ngrok –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:4040
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: `.env`

## üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω:
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω" –≤ Express.ms
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É `/start`
- –†–∞–±–æ—Ç–∞—Ç—å –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π Docker —Å—Ä–µ–¥–µ
- –ò–º–µ—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ngrok —Ç—É–Ω–Ω–µ–ª—å
"""
    
    with open('/root/test/express_bot/DOCKER_NGROK_SETUP_GUIDE.md', 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: DOCKER_NGROK_SETUP_GUIDE.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ngrok –¥–ª—è Express Bot –≤ Docker...")
    
    # 1. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª...")
    create_env_file()
    
    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ngrok
    print("\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ngrok...")
    authtoken = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ngrok authtoken (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    subdomain = input("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–æ–¥–¥–æ–º–µ–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    update_ngrok_config(authtoken if authtoken else None, subdomain if subdomain else None)
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã
    print("\n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã...")
    if not start_docker_services():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å—ã")
        return
    
    # 4. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\n4Ô∏è‚É£ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    wait_for_services()
    
    # 5. –ü–æ–ª—É—á–∞–µ–º URL ngrok
    print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º URL ngrok...")
    tunnel_url = get_ngrok_url()
    
    if tunnel_url:
        # 6. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
        print("\n6Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞...")
        update_bot_config(tunnel_url)
        
        # 7. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print("\n7Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
        create_docker_instructions(tunnel_url)
        
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ngrok –¥–ª—è Docker –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üê≥ Bot ID: 00c46d64-1127-5a96-812d-3d8b27c58b99")
        print(f"üåê Webhook URL: {tunnel_url}/webhook")
        print(f"üìä ngrok –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:4040")
        print(f"üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: DOCKER_NGROK_SETUP_GUIDE.md")
        
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Express.ms")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ SmartApp")
        print("3. –£–∫–∞–∂–∏—Ç–µ webhook URL")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        
        print("\nüê≥ Docker —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–µ")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: docker-compose -f docker-compose.ngrok.yml down")
        
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL ngrok")
        print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 4040 —Å–≤–æ–±–æ–¥–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f docker-compose.ngrok.yml logs ngrok")

if __name__ == "__main__":
    main()
