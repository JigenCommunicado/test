#!/usr/bin/env python3
"""
Express Bot Final - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List

from pybotx import Bot, BotAccountWithSecret, HandlerCollector, IncomingMessage, StatusRecipient, OutgoingMessage, KeyboardMarkup, Button, ButtonRow

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config_manager import config_manager
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
    BOT_CONFIG = {
        'bot_id': config_manager.get('bot_settings.bot_id', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': config_manager.get('bot_settings.secret_key', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': config_manager.get('bot_settings.api_base_url', 'http://localhost:5002'),
        'bot_name': config_manager.get('bot_settings.bot_name', 'Flight Booking Bot'),
        'bot_description': config_manager.get('bot_settings.bot_description', '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã')
    }
except ImportError:
    # Fallback –∫ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ config_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    BOT_CONFIG = {
        'bot_id': os.environ.get('EXPRESS_BOT_ID', '00c46d64-1127-5a96-812d-3d8b27c58b99'),
        'secret_key': os.environ.get('EXPRESS_SECRET_KEY', 'a75b4cd97d9e88e543f077178b2d5a4f'),
        'api_base_url': os.environ.get('FLASK_API_URL', 'http://localhost:5002'),
        'bot_name': 'Flight Booking Bot',
        'bot_description': '–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã'
    }

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
collector = HandlerCollector()

# –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ç–∞ –¥–ª—è Express.ms
# –í–ê–ñ–ù–û: Express.ms –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π API, –Ω–µ pybotx
# –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å REST API Express.ms
bot_account = BotAccountWithSecret(
    id=BOT_CONFIG['bot_id'],
    secret_key=BOT_CONFIG['secret_key'],
    host="https://api.express.ms",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint
    cts_url="https://api.express.ms"  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π CTS endpoint
)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(collectors=[collector], bot_accounts=[bot_account])

class FinalFlightBookingBot:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    
    def __init__(self):
        self.api_url = BOT_CONFIG['api_base_url']
        self.user_sessions = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
        try:
            from config_manager import config_manager
            self.directions = config_manager.get('directions', {})
            self.oke_by_location = config_manager.get('oke_by_location', {})
            self.positions = config_manager.get('positions', [])
        except ImportError:
            # Fallback –∫ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            self.directions = {
                '–ú–°–ö': [
                    '–ê–Ω–∞–¥—ã—Ä—å', '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–∞–≥–∞–¥–∞–Ω',
                    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–°–∞–º–∞—Ä–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–£—Ñ–∞', '–•–∞–±–∞—Ä–æ–≤—Å–∫',
                    '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–í–∞—Ä–∞–¥–µ—Ä–æ', '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'
                ],
                '–°–ü–ë': [
                    '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–æ—Å–∫–≤–∞', '–°–∞–º–∞—Ä–∞', '–°–æ—á–∏',
                    '–•—É—Ä–≥–∞–¥–∞', '–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö'
                ],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': [
                    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–°–æ—á–∏', '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–°–∞–Ω—å—è'
                ],
                '–°–æ—á–∏': []
            }
            self.oke_by_location = {
                '–ú–°–ö': ['–û–ö–≠ 1', '–û–ö–≠ 2', '–û–ö–≠ 3', '–û–õ–°–∏–¢'],
                '–°–ü–ë': ['–û–ö–≠ 4', '–û–ö–≠ 5', '–û–õ–°–∏–¢'],
                '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': ['–û–ö–≠ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–û–õ–°–∏–¢'],
                '–°–æ—á–∏': ['–û–ö–≠ –°–æ—á–∏', '–û–õ–°–∏–¢']
            }
            self.positions = ['–ë–ü', '–ë–ü BS', '–°–ë–≠', '–ò–ü–ë']
        
    async def get_application_periods(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_url}/api/public/application-periods") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('periods', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
        return []
    
    async def submit_application(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–π—Å"""
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_url}/api/application", json=user_data) as response:
                    if response.status == 200:
                        return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"}
    
    def create_start_keyboard(self) -> KeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü–∏–∏"""
        buttons = []
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –ú–æ—Å–∫–≤–∞ –∏ –°–ü–±
        row1 = ButtonRow()
        row1.add_button(Button(
            text="üèôÔ∏è –ú–æ—Å–∫–≤–∞",
            callback_data="location_–ú–°–ö"
        ))
        row1.add_button(Button(
            text="üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            callback_data="location_–°–ü–ë"
        ))
        buttons.append(row1)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ –∏ –°–æ—á–∏
        row2 = ButtonRow()
        row2.add_button(Button(
            text="üèûÔ∏è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
            callback_data="location_–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"
        ))
        row2.add_button(Button(
            text="üèñÔ∏è –°–æ—á–∏",
            callback_data="location_–°–æ—á–∏"
        ))
        buttons.append(row2)
        
        return KeyboardMarkup(buttons)
    
    def create_oke_keyboard(self, location: str) -> KeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
        buttons = []
        oke_list = self.oke_by_location.get(location, ['–û–õ–°–∏–¢'])
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –û–ö–≠
        for i in range(0, len(oke_list), 2):
            row = ButtonRow()
            for j in range(2):
                if i + j < len(oke_list):
                    oke = oke_list[i + j]
                    row.add_button(Button(
                        text=oke,
                        callback_data=f"oke_{oke}"
                    ))
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        back_row = ButtonRow()
        back_row.add_button(Button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_start"
        ))
        buttons.append(back_row)
        
        return KeyboardMarkup(buttons)
    
    def create_calendar_keyboard(self, year: int = None, month: int = None) -> KeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)"""
        if year is None:
            year = datetime.now().year
        if month is None:
            month = datetime.now().month
            
        buttons = []
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        nav_row = ButtonRow()
        nav_row.add_button(Button(
            text="‚¨ÖÔ∏è",
            callback_data=f"nav_month_{year}_{month-1 if month > 1 else 12}_{year-1 if month == 1 else year}"
        ))
        nav_row.add_button(Button(
            text=f"{month_names[month-1]} {year}",
            callback_data="ignore"
        ))
        nav_row.add_button(Button(
            text="‚û°Ô∏è",
            callback_data=f"nav_month_{year}_{month+1 if month < 12 else 1}_{year+1 if month == 12 else year}"
        ))
        buttons.append(nav_row)
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays_row = ButtonRow()
        for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]:
            weekdays_row.add_button(Button(
                text=day,
                callback_data="ignore"
            ))
        buttons.append(weekdays_row)
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        first_day = datetime(year, month, 1)
        last_day = (first_day + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        days_in_month = last_day.day
        first_weekday = first_day.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
        current_date = first_day
        row = ButtonRow()
        
        # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
        for _ in range(first_weekday):
            row.add_button(Button(text=" ", callback_data="ignore"))
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        for day in range(1, days_in_month + 1):
            current_date = datetime(year, month, day)
            today = datetime.now()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: –î–î.–ú–ú.–ì–ì–ì–ì
            date_str = f"{day:02d}.{month:02d}.{year}"
            
            # –í—ã–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            if current_date.date() == today.date():
                button_text = f"‚úàÔ∏è {day}"
            else:
                button_text = str(day)
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
            callback_data = f"date_{date_str}" if current_date.date() >= today.date() else "ignore"
            
            row.add_button(Button(
                text=button_text,
                callback_data=callback_data
            ))
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
            if len(row.buttons) == 7:
                buttons.append(row)
                row = ButtonRow()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if row.buttons:
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        back_row = ButtonRow()
        back_row.add_button(Button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_start"
        ))
        buttons.append(back_row)
        
        return KeyboardMarkup(buttons)
    
    def create_position_keyboard(self) -> KeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π (–ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        for position in self.positions:
            row = ButtonRow()
            row.add_button(Button(
                text=position,
                callback_data=f"position_{position}"
            ))
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
        back_row = ButtonRow()
        back_row.add_button(Button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã",
            callback_data="back_to_date_selection"
        ))
        buttons.append(back_row)
        
        return KeyboardMarkup(buttons)
    
    def create_direction_keyboard(self, location: str) -> KeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        buttons = []
        directions_list = self.directions.get(location, [])
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(directions_list), 2):
            row = ButtonRow()
            for j in range(2):
                if i + j < len(directions_list):
                    direction = directions_list[i + j]
                    row.add_button(Button(
                        text=direction,
                        callback_data=f"direction_{direction}"
                    ))
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        manual_row = ButtonRow()
        manual_row.add_button(Button(
            text="‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            callback_data="manual_direction_input"
        ))
        buttons.append(manual_row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
        back_row = ButtonRow()
        back_row.add_button(Button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã",
            callback_data="back_to_date_selection"
        ))
        buttons.append(back_row)
        
        return KeyboardMarkup(buttons)
    
    def create_fio_keyboard(self, has_last_data: bool = False, last_fio: str = "", last_tab_num: str = "") -> KeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û"""
        buttons = []
        
        if has_last_data and last_fio and last_tab_num:
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            confirm_row = ButtonRow()
            confirm_row.add_button(Button(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ",
                callback_data="confirm_last_fio_tabnum"
            ))
            buttons.append(confirm_row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        back_row = ButtonRow()
        back_row.add_button(Button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            callback_data="back_to_date_selection"
        ))
        buttons.append(back_row)
        
        return KeyboardMarkup(buttons)
    
    def create_confirmation_keyboard(self) -> KeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        action_row = ButtonRow()
        action_row.add_button(Button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data="confirm_application"
        ))
        action_row.add_button(Button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data="back_to_start"
        ))
        buttons.append(action_row)
        
        return KeyboardMarkup(buttons)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
final_bot = FinalFlightBookingBot()

@collector.command("/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
async def start_handler(message: IncomingMessage, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    user_id = str(message.user.huid)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    periods = await final_bot.get_application_periods()
    
    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–π—Å–∞.

–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:

**–õ–∏–º–∏—Ç:** –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ—Å—è—Ü –Ω–∞ —Ä–µ–π—Å/—ç—Å—Ç–∞—Ñ–µ—Ç—É.

**–°—Ä–æ–∫–∏:** –° 20-–≥–æ –ø–æ 5-–µ —á–∏—Å–ª–æ (–≤–∫–ª.) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.

**–£—Å–ª–æ–≤–∏—è –ß–ö–≠:** 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞.
_–í–Ω–∏–º–∞–Ω–∏–µ: –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π._

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
‚Ä¢ –ù–∞–∑–µ–º–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞–∂–Ω–µ–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.
‚Ä¢ –ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ –∑–∞—è–≤–æ–∫ ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–º, —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ —Ä–µ–π—Å–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –Ω–µ—Ç –æ—Ç–ø—É—Å–∫–∞ –≤ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.

–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–∏–∂–µ: üëá"""
    
    if not periods:
        welcome_text += "\n\nüö´ **–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–π—Å—ã.**"
        welcome_text += "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    keyboard = final_bot.create_start_keyboard()
    
    await bot.send(
        message.reply(welcome_text, keyboard=keyboard)
    )

async def handle_callback_query(message: IncomingMessage, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
    user_id = str(message.user.huid)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not hasattr(message, 'callback_query') or not message.callback_query:
        return
    
    callback_data = message.callback_query.data
    logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback'–æ–≤
    if callback_data == "back_to_start":
        await start_handler(message, bot)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in final_bot.user_sessions:
            del final_bot.user_sessions[user_id]
    
    elif callback_data.startswith("location_"):
        await handle_location_selection(message, bot, callback_data)
    
    elif callback_data.startswith("oke_"):
        await handle_oke_selection(message, bot, callback_data)
    
    elif callback_data.startswith("nav_month_"):
        await handle_calendar_navigation(message, bot, callback_data)
    
    elif callback_data.startswith("date_"):
        await handle_date_selection(message, bot, callback_data)
    
    elif callback_data.startswith("position_"):
        await handle_position_selection(message, bot, callback_data)
    
    elif callback_data.startswith("direction_"):
        await handle_direction_selection(message, bot, callback_data)
    
    elif callback_data == "manual_direction_input":
        await handle_manual_direction_input(message, bot)
    
    elif callback_data == "confirm_last_fio_tabnum":
        await handle_confirm_last_fio(message, bot)
    
    elif callback_data == "confirm_application":
        await handle_confirm_application(message, bot)
    
    elif callback_data == "back_to_date_selection":
        await handle_back_to_date_selection(message, bot)
    
    else:
        await bot.send(message.reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"))

async def handle_location_selection(message: IncomingMessage, bot: Bot, callback_data: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    user_id = str(message.user.huid)
    location = callback_data.replace("location_", "")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final_bot.user_sessions[user_id] = {
        'step': 'oke',
        'data': {'location': location}
    }
    
    keyboard = final_bot.create_oke_keyboard(location)
    await bot.send(
        message.reply(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: **{location}**!\n\n"
            f"üëå –û—Ç–ª–∏—á–Ω–æ!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ **–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ** –¥–ª—è *{location}*:"
        ),
        keyboard=keyboard
    )

async def handle_oke_selection(message: IncomingMessage, bot: Bot, callback_data: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –û–ö–≠"""
    user_id = str(message.user.huid)
    oke = callback_data.replace("oke_", "")
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    final_bot.user_sessions[user_id]['data']['oke'] = oke
    final_bot.user_sessions[user_id]['step'] = 'calendar'
    
    keyboard = final_bot.create_calendar_keyboard()
    await bot.send(
        message.reply(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ö–≠: **{oke}**!\n\n"
            f"üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:"
        ),
        keyboard=keyboard
    )

async def handle_calendar_navigation(message: IncomingMessage, bot: Bot, callback_data: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    user_id = str(message.user.huid)
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    parts = callback_data.split("_")
    year = int(parts[2])
    month = int(parts[3])
    
    keyboard = final_bot.create_calendar_keyboard(year, month)
    await bot.send(
        message.reply(
            f"üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:"
        ),
        keyboard=keyboard
    )

async def handle_date_selection(message: IncomingMessage, bot: Bot, callback_data: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    user_id = str(message.user.huid)
    date_str = callback_data.replace("date_", "")
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    final_bot.user_sessions[user_id]['data']['date'] = date_str
    final_bot.user_sessions[user_id]['step'] = 'position'
    
    keyboard = final_bot.create_position_keyboard()
    await bot.send(
        message.reply(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: **{date_str}**!\n\n"
            f"üë®‚Äç‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É **–¥–æ–ª–∂–Ω–æ—Å—Ç—å**:"
        ),
        keyboard=keyboard
    )

async def handle_position_selection(message: IncomingMessage, bot: Bot, callback_data: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    user_id = str(message.user.huid)
    position = callback_data.replace("position_", "")
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    final_bot.user_sessions[user_id]['data']['position'] = position
    final_bot.user_sessions[user_id]['step'] = 'fio'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_last_data = False  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    last_fio = ""
    last_tab_num = ""
    
    keyboard = final_bot.create_fio_keyboard(has_last_data, last_fio, last_tab_num)
    
    fio_text = """üìù –û—Ç–ª–∏—á–Ω–æ!
–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ **–§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä** –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:
```
–§–ò–û
–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
```
–ù–∞–ø—Ä–∏–º–µ—Ä:
```
–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í.
119356
```"""
    
    if has_last_data:
        fio_text += f"""
–ï—Å–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:
```
{last_fio}
{last_tab_num}
```
–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"""
    
    await bot.send(
        message.reply(fio_text),
        keyboard=keyboard
    )

async def handle_direction_selection(message: IncomingMessage, bot: Bot, callback_data: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = str(message.user.huid)
    direction = callback_data.replace("direction_", "")
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    final_bot.user_sessions[user_id]['data']['direction'] = direction
    final_bot.user_sessions[user_id]['step'] = 'wishes'
    
    await bot.send(
        message.reply(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{direction}**!\n\n"
            f"üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:"
        )
    )

async def handle_manual_direction_input(message: IncomingMessage, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = str(message.user.huid)
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    final_bot.user_sessions[user_id]['step'] = 'manual_direction'
    
    await bot.send(
        message.reply(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è** —Ç–µ–∫—Å—Ç–æ–º:"
        )
    )

async def handle_confirm_last_fio(message: IncomingMessage, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –§–ò–û"""
    user_id = str(message.user.huid)
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    fio = "–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í."
    tab_num = "119356"
    
    final_bot.user_sessions[user_id]['data']['fio'] = fio
    final_bot.user_sessions[user_id]['data']['tab_num'] = tab_num
    final_bot.user_sessions[user_id]['step'] = 'direction'
    
    location = final_bot.user_sessions[user_id]['data']['location']
    keyboard = final_bot.create_direction_keyboard(location)
    
    await bot.send(
        message.reply(
            f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!\n\n"
            f"üåç –í—ã–±–µ—Ä–∏—Ç–µ **–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** –≤–∞—à–µ–≥–æ —Ä–µ–π—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:"
        ),
        keyboard=keyboard
    )

async def handle_confirm_application(message: IncomingMessage, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_id = str(message.user.huid)
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    session = final_bot.user_sessions[user_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await bot.send(message.reply("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    application_data = {
        **session['data'],
        'user_id': user_id,
        'timestamp': datetime.now().isoformat()
    }
    
    result = await final_bot.submit_application(application_data)
    
    if result.get('success'):
        success_text = """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Ä–µ–π—Å–∞ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ –¶–ü –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ–ª–µ—Ç–æ–≤.

–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start."""
        
        keyboard = final_bot.create_start_keyboard()
        await bot.send(message.reply(success_text, keyboard=keyboard))
    else:
        error_text = f"""‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏**

–ü—Ä–∏—á–∏–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."""
        
        keyboard = final_bot.create_start_keyboard()
        await bot.send(message.reply(error_text, keyboard=keyboard))
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    if user_id in final_bot.user_sessions:
        del final_bot.user_sessions[user_id]

async def handle_back_to_date_selection(message: IncomingMessage, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    user_id = str(message.user.huid)
    
    if user_id not in final_bot.user_sessions:
        await start_handler(message, bot)
        return
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    session = final_bot.user_sessions[user_id]
    session['data'] = {
        'location': session['data'].get('location'),
        'oke': session['data'].get('oke')
    }
    session['step'] = 'calendar'
    
    keyboard = final_bot.create_calendar_keyboard()
    await bot.send(
        message.reply(
            f"üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è —Ä–µ–π—Å–∞:"
        ),
        keyboard=keyboard
    )

@collector.default_message_handler
async def message_handler(message: IncomingMessage, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    user_id = str(message.user.huid)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query
    await handle_callback_query(message, bot)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not hasattr(message, 'callback_query') or not message.callback_query:
        text = message.body.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if user_id not in final_bot.user_sessions:
            keyboard = final_bot.create_start_keyboard()
            await bot.send(
                message.reply(
                    "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                    "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞"
                ),
                keyboard=keyboard
            )
            return
        
        session = final_bot.user_sessions[user_id]
        step = session['step']
        
        if step == 'fio':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –∏ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            lines = text.split('\n')
            if len(lines) >= 2:
                fio = lines[0].strip()
                tab_num = lines[1].strip()
                
                session['data']['fio'] = fio
                session['data']['tab_num'] = tab_num
                session['step'] = 'direction'
                
                location = session['data']['location']
                keyboard = final_bot.create_direction_keyboard(location)
                await bot.send(
                    message.reply(
                        f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!\n\n"
                        f"üåç –í—ã–±–µ—Ä–∏—Ç–µ **–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** –≤–∞—à–µ–≥–æ —Ä–µ–π—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:"
                    ),
                    keyboard=keyboard
                )
            else:
                await bot.send(
                    message.reply(
                        "‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ **–§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä** –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.\n\n"
                        "–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                        "```\n"
                        "–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í.\n"
                        "119356\n"
                        "```"
                    )
                )
        
        elif step == 'manual_direction':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            session['data']['direction'] = text
            session['step'] = 'wishes'
            
            await bot.send(
                message.reply(
                    f"‚úÖ –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{text}**!\n\n"
                    f"üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:"
                )
            )
        
        elif step == 'wishes':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
            session['data']['wishes'] = text
            session['step'] = 'confirmation'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            data = session['data']
            summary = f"""‚ú® **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**

–õ–æ–∫–∞—Ü–∏—è: **{data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–û–ö–≠: **{data.get('oke', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–î–∞—Ç–∞: **{data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–î–æ–ª–∂–Ω–æ—Å—Ç—å: **{data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}**
–§–ò–û: **{data.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: **{data.get('tab_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}**
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **{data.get('direction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}**
–ü–æ–∂–µ–ª–∞–Ω–∏—è: **{data.get('wishes', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}**"""
            
            keyboard = final_bot.create_confirmation_keyboard()
            await bot.send(message.reply(summary, keyboard=keyboard))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Final Express Flight Booking Bot...")
    logger.info(f"üì± Bot ID: {BOT_CONFIG['bot_id']}")
    logger.info(f"üîó API URL: {BOT_CONFIG['api_base_url']}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.startup()

if __name__ == "__main__":
    asyncio.run(main())
