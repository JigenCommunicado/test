#!/usr/bin/env python3
"""
Express.ms Bot –¥–ª—è Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
–°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Express.ms
"""

import os
import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, Any, Optional

import aiohttp
from aiohttp import web
import asyncpg
import redis.asyncio as redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=os.getenv('LOG_LEVEL', 'INFO'),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ExpressBotDocker:
    """Express.ms Bot –¥–ª—è Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.bot_id = None
        self.secret_key = None
        self.host = None
        self.database_url = None
        self.redis_url = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_received': 0,
            'commands_processed': 0,
            'errors': 0,
            'start_time': datetime.now().isoformat(),
            'last_activity': None
        }
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.db_pool = None
        self.redis_client = None
        
    async def init_config(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ BOT_CREDENTIALS
            bot_credentials = os.getenv('BOT_CREDENTIALS', '')
            if ':' in bot_credentials:
                self.bot_id, self.secret_key = bot_credentials.split(':', 1)
            else:
                raise ValueError("BOT_CREDENTIALS –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å bot_id:secret_key")
            
            self.host = os.getenv('HOST', 'https://api.express.ms')
            self.database_url = os.getenv('DATABASE_URL')
            self.redis_url = os.getenv('REDIS_URL')
            
            logger.info(f"ü§ñ Bot ID: {self.bot_id}")
            logger.info(f"üåê Host: {self.host}")
            logger.info(f"üóÑÔ∏è Database: {self.database_url}")
            logger.info(f"üî¥ Redis: {self.redis_url}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        if not self.database_url:
            logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î")
            return
            
        try:
            self.db_pool = await asyncpg.create_pool(
                self.database_url,
                min_size=1,
                max_size=10
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise
    
    async def init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        if not self.redis_url:
            logger.warning("‚ö†Ô∏è REDIS_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Redis")
            return
            
        try:
            self.redis_client = redis.from_url(self.redis_url)
            await self.redis_client.ping()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise
    
    async def save_message(self, message_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_pool:
            return
            
        try:
            async with self.db_pool.acquire() as conn:
                await conn.execute("""
                    INSERT INTO messages (user_id, chat_id, message_text, message_type, created_at)
                    VALUES ($1, $2, $3, $4, $5)
                """, 
                message_data.get('user_id'),
                message_data.get('chat_id'),
                message_data.get('text', ''),
                message_data.get('type', 'message'),
                datetime.now()
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def get_user_data(self, user_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis"""
        if not self.redis_client:
            return None
            
        try:
            data = await self.redis_client.get(f"user:{user_id}")
            return json.loads(data) if data else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def save_user_data(self, user_id: str, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis"""
        if not self.redis_client:
            return
            
        try:
            await self.redis_client.setex(
                f"user:{user_id}",
                3600,  # TTL 1 —á–∞—Å
                json.dumps(data)
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def process_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.stats['messages_received'] += 1
            self.stats['last_activity'] = datetime.now().isoformat()
            
            user_id = message_data.get('user_id')
            text = message_data.get('text', '').strip()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.save_message(message_data)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.get_user_data(user_id) or {}
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text.startswith('/'):
                self.stats['commands_processed'] += 1
                return await self.process_command(text, user_id, user_data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            return await self.process_text_message(text, user_id, user_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['errors'] += 1
            return {"status": "error", "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞"}
    
    async def process_command(self, command: str, user_id: str, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        if command == '/start':
            await self.save_user_data(user_id, {"state": "started", "step": "welcome"})
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Express Bot!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ø–æ–º–æ—â—å\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                }
            }
        
        elif command == '/help':
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": "üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
                }
            }
        
        elif command == '/status':
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n‚úÖ –û–Ω–ª–∞–π–Ω\nü§ñ ID: {self.bot_id}\nüìà –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_received']}\n‚ö° –ö–æ–º–∞–Ω–¥: {self.stats['commands_processed']}\n‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}"
                }
            }
        
        elif command == '/info':
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\nüè¢ Express.ms Bot\nüê≥ Docker –≤–µ—Ä—Å–∏—è\nüïê –ó–∞–ø—É—â–µ–Ω: {self.stats['start_time']}\nüåê Host: {self.host}"
                }
            }
        
        else:
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
                }
            }
    
    async def process_text_message(self, text: str, user_id: str, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if "–ø—Ä–∏–≤–µ—Ç" in text.lower():
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
                }
            }
        
        elif "–∫–∞–∫ –¥–µ–ª–∞" in text.lower():
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": "üòä –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å –∫–∞–∫?"
                }
            }
        
        else:
            return {
                "status": "ok",
                "response": {
                    "type": "text",
                    "text": f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
                }
            }
    
    async def webhook_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Express.ms"""
        try:
            data = await request.json()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            result = await self.process_message(data)
            
            return web.json_response(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            self.stats['errors'] += 1
            return web.json_response(
                {"status": "error", "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"},
                status=500
            )
    
    async def health_handler(self, request):
        """Health check endpoint"""
        return web.json_response({
            "status": "healthy",
            "bot_id": self.bot_id,
            "host": self.host,
            "uptime": self.stats['start_time'],
            "stats": self.stats,
            "database": "connected" if self.db_pool else "disconnected",
            "redis": "connected" if self.redis_client else "disconnected"
        })
    
    async def manifest_handler(self, request):
        """Manifest endpoint –¥–ª—è Express.ms"""
        return web.json_response({
            "name": "Express Bot",
            "description": "–ë–æ—Ç –¥–ª—è Express.ms",
            "version": "1.0.0",
            "bot_id": self.bot_id,
            "capabilities": ["text", "commands"],
            "webhook_url": f"{self.host}/webhook"
        })
    
    async def stats_handler(self, request):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        return web.json_response({
            "status": "online",
            "bot_id": self.bot_id,
            "stats": self.stats,
            "timestamp": datetime.now().isoformat()
        })
    
    async def init_app(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await self.init_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        await self.init_database()
        await self.init_redis()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = web.Application()
        
        # Middleware –¥–ª—è CORS
        @web.middleware
        async def cors_handler(request, handler):
            response = await handler(request)
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            return response
        
        app.middlewares.append(cors_handler)
        
        # –ú–∞—Ä—à—Ä—É—Ç—ã
        app.router.add_post('/webhook', self.webhook_handler)
        app.router.add_get('/health', self.health_handler)
        app.router.add_get('/manifest', self.manifest_handler)
        app.router.add_get('/stats', self.stats_handler)
        app.router.add_get('/', self.health_handler)
        
        return app
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Express Bot Docker...")
        
        app = await self.init_app()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, '0.0.0.0', 8000)
        await site.start()
        
        logger.info("‚úÖ Express Bot Docker –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        logger.info(f"üåê Health: http://0.0.0.0:8000/health")
        logger.info(f"üìã Manifest: http://0.0.0.0:8000/manifest")
        logger.info(f"üìä Stats: http://0.0.0.0:8000/stats")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await runner.cleanup()
            if self.db_pool:
                await self.db_pool.close()
            if self.redis_client:
                await self.redis_client.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ExpressBotDocker()
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main())
