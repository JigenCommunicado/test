#!/usr/bin/env python3
"""
Express Bot Webhook Server
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç Express Messenger
"""

import asyncio
import json
import logging
from aiohttp import web, ClientSession
from aiohttp.web import Request, Response

from express_bot import bot, final_bot
from express_bot_config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = get_config()

class ExpressBotWebhookServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ Express –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = bot
        self.config = config
        self.logger = logger
        
    async def webhook_handler(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Express"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            data = await request.json()
            self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(data, ensure_ascii=False)}")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–∞ –æ—Ç Express
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è (message, command, etc.)
            
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return web.json_response({
                "status": "ok",
                "message": "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ"
            })
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return web.json_response({
                "status": "error",
                "message": str(e)
            }, status=500)
    
    async def health_handler(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return web.json_response({
            "status": "ok",
            "service": "Express Bot Webhook Server",
            "bot_id": self.config['bot_id'],
            "timestamp": asyncio.get_event_loop().time()
        })
    
    async def manifest_handler(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±–æ—Ç–∞"""
        manifest = {
            "name": self.config['bot_name'],
            "version": "1.0.0",
            "description": self.config['bot_description'],
            "icon": "‚úàÔ∏è",
            "color": "#0088cc",
            "author": "Express Bot Team",
            "webhook": "/webhook",
            "commands": [
                {
                    "command": "/start",
                    "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
                },
                {
                    "command": "/new",
                    "description": "–ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–π—Å"
                },
                {
                    "command": "/my",
                    "description": "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
                },
                {
                    "command": "/help",
                    "description": "–°–ø—Ä–∞–≤–∫–∞"
                },
                {
                    "command": "/status",
                    "description": "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
                }
            ]
        }
        return web.json_response(manifest)
    
    async def admin_panel_handler(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            admin_panel_path = '/root/test/express_bot/frontend/admin_panel.html'
            with open(admin_panel_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º URL API –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            content = content.replace(
                'const SMARTAPP_URL = \'http://localhost:5002\';',
                f'const SMARTAPP_URL = \'http://{self.config["host"]}:{self.config["port"]}\';'
            )
            
            return web.Response(text=content, content_type='text/html')
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
            return web.Response(
                text="<h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏</h1><p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞</p>",
                content_type='text/html',
                status=500
            )
    
    # API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    async def api_login_handler(self, request: Request) -> Response:
        """API: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        try:
            data = await request.json()
            username = data.get('username')
            password = data.get('password')
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
            if username == 'admin' and password == 'admin':
                return web.json_response({
                    "success": True,
                    "token": "demo_token_123",
                    "user": {
                        "id": 1,
                        "username": "admin",
                        "email": "admin@example.com",
                        "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                        "role": "admin",
                        "status": "active",
                        "permissions": ["all"]
                    }
                })
            else:
                return web.json_response({
                    "success": False,
                    "error": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                })
        except Exception as e:
            return web.json_response({
                "success": False,
                "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            })
    
    async def api_me_handler(self, request: Request) -> Response:
        """API: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return web.json_response({
            "success": True,
            "user": {
                "id": 1,
                "username": "admin",
                "email": "admin@example.com",
                "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "role": "admin",
                "status": "active",
                "permissions": ["all"]
            }
        })
    
    async def api_logout_handler(self, request: Request) -> Response:
        """API: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        return web.json_response({"success": True})
    
    async def api_users_handler(self, request: Request) -> Response:
        """API: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = [
            {
                "id": 1,
                "username": "admin",
                "email": "admin@example.com",
                "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "role": "admin",
                "status": "active",
                "created_at": "2025-01-01T00:00:00Z"
            },
            {
                "id": 2,
                "username": "manager1",
                "email": "manager@example.com",
                "full_name": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                "role": "manager",
                "status": "active",
                "created_at": "2025-01-02T00:00:00Z"
            }
        ]
        return web.json_response({"success": True, "users": users})
    
    async def api_create_user_handler(self, request: Request) -> Response:
        """API: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            data = await request.json()
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            return web.json_response({"success": True, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω"})
        except Exception as e:
            return web.json_response({"success": False, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
    
    async def api_delete_user_handler(self, request: Request) -> Response:
        """API: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = request.match_info['user_id']
        return web.json_response({"success": True, "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω"})
    
    async def api_schedules_handler(self, request: Request) -> Response:
        """API: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        schedules = [
            {
                "id": 1,
                "name": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                "type": "application_reminder",
                "schedule_type": "monthly",
                "is_active": True,
                "next_send": "2025-10-01T09:00:00Z"
            }
        ]
        return web.json_response({"success": True, "schedules": schedules})
    
    async def api_create_schedule_handler(self, request: Request) -> Response:
        """API: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            data = await request.json()
            return web.json_response({"success": True, "message": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"})
        except Exception as e:
            return web.json_response({"success": False, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"})
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        app = web.Application()
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
        async def cors_handler(request, handler):
            response = await handler(request)
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            return response
        
        app.middlewares.append(cors_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        app.router.add_post('/webhook', self.webhook_handler)
        app.router.add_get('/health', self.health_handler)
        app.router.add_get('/manifest', self.manifest_handler)
        app.router.add_get('/', self.health_handler)
        app.router.add_get('/admin', self.admin_panel_handler)
        app.router.add_static('/', path='/root/test/express_bot/frontend', name='static')
        
        # API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        app.router.add_post('/api/auth/login', self.api_login_handler)
        app.router.add_get('/api/auth/me', self.api_me_handler)
        app.router.add_post('/api/auth/logout', self.api_logout_handler)
        app.router.add_get('/api/users', self.api_users_handler)
        app.router.add_post('/api/users', self.api_create_user_handler)
        app.router.add_delete('/api/users/{user_id}', self.api_delete_user_handler)
        app.router.add_get('/api/notifications/schedules', self.api_schedules_handler)
        app.router.add_post('/api/notifications/schedules', self.api_create_schedule_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(
            runner, 
            self.config['host'], 
            self.config['port']
        )
        
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Express Bot Webhook Server...")
        self.logger.info(f"üì± Bot ID: {self.config['bot_id']}")
        self.logger.info(f"üîó Webhook URL: {self.config['webhook_url']}")
        self.logger.info(f"üåê Server: http://{self.config['host']}:{self.config['port']}")
        
        await site.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.bot.startup())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Future()  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
        except KeyboardInterrupt:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        finally:
            await runner.cleanup()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    webhook_server = ExpressBotWebhookServer()
    await webhook_server.start_server()

if __name__ == "__main__":
    asyncio.run(main())
